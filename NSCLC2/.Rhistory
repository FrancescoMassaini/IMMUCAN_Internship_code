# Load CellTFusion results
load("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/04_CellTFusion/CellTFusion_modules_deconv_NSCLC2.RData")
load("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/04_CellTFusion/CellTFusion_Subgroups_NSCLC2.RData")
load("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/04_CellTFusion/CellTFusion_tfs_NSCLC2.RData")
load("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/04_CellTFusion/CellTFusion_Subgroups_NSCLC2.RData")
# Load CellTFusion results
load("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/04_CellTFusion/CellTFusion_modules_deconv_NSCLC2.RData")
a =load("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/04_CellTFusion/CellTFusion_modules_deconv_NSCLC2.RData")
View(a)
View(load("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/04_CellTFusion/CellTFusion_modules_deconv_NSCLC2.RData"))
View(dt)
deconv_subgroups = dt[["Deconvolution matrix"]]
View(deconv_subgroups)
# Load clinical data
clinical = read.csv("../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
dplyr::select(immucan_id, stage, death, neo_adjuvant_treatment, adjuvant_treatment, simple_histology, long_survivors, TIL_score, side_localization, gender) %>%
filter(rownames(.) %in% rownames(deconv_subgroups))
suppressMessages(library(dplyr))
suppressMessages(library(tibble))
suppressMessages(library(tidyr))
suppressMessages(library(org.Hs.eg.db)) # Homo sapiens db
suppressMessages(library(stringr))
suppressMessages(library(RColorBrewer)) # for plot
suppressMessages(library(pheatmap)) # for heatmaps
suppressMessages(library(ADImpute)) # This package provides functions to compute TPM
suppressMessages(library(ggplot2))
suppressMessages(library(FactoMineR))
suppressMessages(library(factoextra))
suppressMessages(library(survival))
suppressMessages(library(ranger))
suppressMessages(library(ggfortify))
suppressMessages(library(rlang))
suppressMessages(library(purrr))
suppressMessages(library(rio))
suppressMessages(library(uwot))
suppressMessages(library(DESeq2))
source("./Functions.R")
source("../Functions.R")
# Load CellTFusion results
load("../../IMMUCAN_data/NSCLC2/04_CellTFusion/CellTFusion_Subgroups_NSCLC2.RData")
load("../../IMMUCAN_data/NSCLC2/04_CellTFusion/CellTFusion_tfs_NSCLC2.RData")
# load("../../IMMUCAN_data/NSCLC2/04_CellTFusion/CellTFusion_modules_deconv_NSCLC2.RData")
deconv_subgroups = dt[["Deconvolution matrix"]]
# Load clinical data
clinical = read.csv("../../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
dplyr::select(immucan_id, stage, death, neo_adjuvant_treatment, adjuvant_treatment, simple_histology, long_survivors, TIL_score, side_localization, gender) %>%
filter(rownames(.) %in% rownames(deconv_subgroups))
# Load clinical data
clinical = read.csv("../../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
dplyr::select(immucan_id, stage, death, neo_adjuvant_treatment, adjuvant_treatment, simple_histology, long_survivors, TIL_score, side_localization, gender) %>%
filter(rownames(.) %in% rownames(deconv_subgroups)) %>%
column_to_rownames(var = "immucan_id")
View(deconv_subgroups)
# Load clinical data
clinical = read.csv("../../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
dplyr::select(immucan_id, stage, death, neo_adjuvant_treatment, adjuvant_treatment, simple_histology, long_survivors, TIL_score, side_localization, gender) %>%
column_to_rownames(var = "immucan_id")
View(clinical)
View(clinical)
# Load clinical data
clinical = read.csv("../../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
dplyr::select(immucan_id, stage, death, neo_adjuvant_treatment, adjuvant_treatment, simple_histology, long_survivors, TIL_score, side_localization, gender) %>%
filter(rownames(.) %in% rownames(deconv_subgroups)) %>%
column_to_rownames(var = "immucan_id")
# Load clinical data
clinical = read.csv("../../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
dplyr::select(immucan_id, stage, death, neo_adjuvant_treatment, adjuvant_treatment, simple_histology, long_survivors, TIL_score, side_localization, gender) %>%
column_to_rownames(var = "immucan_id")
View(clinical)
clinical = clinical[rownames(clinical) %in% rownames(deconv_subgroups),]
View(clinical)
identical(rownames(clinical), rownames(deconv_subgroups))
# Heatmap on TPM, groups and outliers
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_heatmap.pdf"), width = 16, height = 16)
Compute_Samples_Heatmap(t(deconv_subgroups),  sample_feat_df = clinical, main_title = "Heatmap samples vs samples - Euclidian distance matrix on TPM data")
View(deconv_subgroups)
# Sample dendrograms, colored by relevant clinical feature
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_dendrogram.pdf"), width = 16, height = 10)
for (feat in colnames(clinical)){
tree = Compute_Samples_dendrogram(t(deconv_subgroups),  sample_feat_df = clinical, feat_column = feat, main_title = "Sample dendrogram - Euclidian distance matrix on TPM data")
print(tree)
}
# dev.off()
# PCA biplot on TPM
# Compute PCA
pca_result <- FactoMineR::PCA(t(deconv_subgroups), scale.unit = TRUE, graph = FALSE)
fviz_eig(pca_result) # Scree plot: explained variance by PC
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_PCA.pdf"))
for (feat in colnames(clinical)){
p = factoextra::fviz_pca_biplot(pca_result, repel = T, select.var = list(contrib = 5), label = "var",
habillage = as.factor(clinical[,feat]),
addEllipses = T, ellipse.level=0.95, palette = "Dark2",
legend.title = feat,
ggtheme = theme_minimal())
print(p)
}
View(deconv_subgroups)
# Compute PCA
pca_result <- FactoMineR::PCA(deconv_subgroups, scale.unit = TRUE, graph = FALSE)
fviz_eig(pca_result) # Scree plot: explained variance by PC
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_PCA.pdf"))
for (feat in colnames(clinical)){
p = factoextra::fviz_pca_biplot(pca_result, repel = T, select.var = list(contrib = 5), label = "var",
habillage = as.factor(clinical[,feat]),
addEllipses = T, ellipse.level=0.95, palette = "Dark2",
legend.title = feat,
ggtheme = theme_minimal())
print(p)
}
# PCA biplot on TPM
clinical <- clinical %>%
mutate(across(everything(), ~ifelse(. == NA, "NA", .))) #  quote NAs to show them in th plot
# Compute PCA
pca_result <- FactoMineR::PCA(deconv_subgroups, scale.unit = TRUE, graph = FALSE)
fviz_eig(pca_result) # Scree plot: explained variance by PC
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_PCA.pdf"))
for (feat in colnames(clinical)){
p = factoextra::fviz_pca_biplot(pca_result, repel = T, select.var = list(contrib = 5), label = "var",
habillage = as.factor(clinical[,feat]),
addEllipses = T, ellipse.level=0.95, palette = "Dark2",
legend.title = feat,
ggtheme = theme_minimal())
print(p)
}
# repel = T do not overlap the text, select.var = list(contrib = 5) shows only the most 5 variable feature (variables) that contributes to separation. label = var , put label ONLY on the 5 variables
# dev.off()
# Load clinical data
clinical = read.csv("../../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
dplyr::select(immucan_id, stage, death, neo_adjuvant_treatment, adjuvant_treatment, simple_histology, long_survivors, TIL_score, side_localization, gender) %>%
column_to_rownames(var = "immucan_id")
clinical = clinical[rownames(clinical) %in% rownames(deconv_subgroups),]
View(clinical)
# PCA biplot on TPM
clinical <- clinical %>%
mutate(across(everything(), ~ifelse(is.na(.), "NA", .))) #  quote NAs to show them in th plot
# Compute PCA
pca_result <- FactoMineR::PCA(deconv_subgroups, scale.unit = TRUE, graph = FALSE)
fviz_eig(pca_result) # Scree plot: explained variance by PC
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_PCA.pdf"))
for (feat in colnames(clinical)){
p = factoextra::fviz_pca_biplot(pca_result, repel = T, select.var = list(contrib = 5), label = "var",
habillage = as.factor(clinical[,feat]),
addEllipses = T, ellipse.level=0.95, palette = "Dark2",
legend.title = feat,
ggtheme = theme_minimal())
print(p)
}
# repel = T do not overlap the text, select.var = list(contrib = 5) shows only the most 5 variable feature (variables) that contributes to separation. label = var , put label ONLY on the 5 variables
# dev.off()
# UMAP on TPM
clinical <- clinical %>%
mutate(across(everything(), ~ifelse(. == "NA", NA, .))) # Restore NA
umap_result <- as.data.frame(umap(deconv, n_neighbors = 8, min_dist = 0.1, metric = "euclidean")) # t() it's not necessary beacuse TPM has been already transposed
# UMAP on TPM
clinical <- clinical %>%
mutate(across(everything(), ~ifelse(. == "NA", NA, .))) # Restore NA
umap_result <- as.data.frame(umap(deconv_subgroups, n_neighbors = 8, min_dist = 0.1, metric = "euclidean"))
colnames(umap_result) <- c("UMAP1", "UMAP2")
umap_result = rownames_to_column(umap_result, var = "samples")
clinical_umap = rownames_to_column(clinical, var = "samples")
umap_result = left_join(umap_result, clinical_umap, by = "samples")
for (feat in colnames(clinical_umap)[-1]){
col = c("UMAP1", "UMAP2", feat)
umap_ggplot = dplyr::select(umap_result, all_of(col))
colnames(umap_ggplot)[3] = "feat"
umap_plot <- ggplot(umap_ggplot, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal() +
labs(color = feat)
print(umap_plot)
}
# Load MetaSample and MetaGene from BIODICA analysis.
metasample_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_ica_A.xls", header = TRUE, row.names = 1)
metagene_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_ica_S.xls", header = TRUE, row.names = 1)
# Correlation
create_correlation_plot(data1 = deconv_subgroups, data2 = metasample_df, correlation_type = "pearson", r_threshold = 0.7, p_threshold = 0.05)
View(tfs)
# Ensure same patients order
# Heatmap on TPM, groups and outliers
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_heatmap.pdf"), width = 16, height = 16)
Compute_Samples_Heatmap(t(tfs),  sample_feat_df = clinical, main_title = "Heatmap samples vs samples - Euclidian distance matrix on TPM data")
# dev.off()
# Heatmap on TPM, groups and outliers
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_heatmap.pdf"), width = 16, height = 16)
Compute_Samples_Heatmap(t(tfs),  sample_feat_df = clinical, main_title = "Heatmap samples vs samples - Euclidian distance matrix on TPM data")
# Sample dendrograms, colored by relevant clinical feature
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_dendrogram.pdf"), width = 16, height = 10)
for (feat in colnames(clinical)){
tree = Compute_Samples_dendrogram(t(tfs),  sample_feat_df = clinical, feat_column = feat, main_title = "Sample dendrogram - Euclidian distance matrix on TPM data")
print(tree)
}
# dev.off()
# PCA biplot on TPM
clinical <- clinical %>%
mutate(across(everything(), ~ifelse(is.na(.), "NA", .))) #  quote NAs to show them in th plot
# Compute PCA
pca_result <- FactoMineR::PCA(tfs, scale.unit = TRUE, graph = FALSE)
fviz_eig(pca_result) # Scree plot: explained variance by PC
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_PCA.pdf"))
for (feat in colnames(clinical)){
p = factoextra::fviz_pca_biplot(pca_result, repel = T, select.var = list(contrib = 5), label = "var",
habillage = as.factor(clinical[,feat]),
addEllipses = T, ellipse.level=0.95, palette = "Dark2",
legend.title = feat,
ggtheme = theme_minimal())
print(p)
}
# repel = T do not overlap the text, select.var = list(contrib = 5) shows only the most 5 variable feature (variables) that contributes to separation. label = var , put label ONLY on the 5 variables
# dev.off()
# UMAP on TPM
clinical <- clinical %>%
mutate(across(everything(), ~ifelse(. == "NA", NA, .))) # Restore NA
umap_result <- as.data.frame(umap(tfs, n_neighbors = 8, min_dist = 0.1, metric = "euclidean"))
colnames(umap_result) <- c("UMAP1", "UMAP2")
umap_result = rownames_to_column(umap_result, var = "samples")
clinical_umap = rownames_to_column(clinical, var = "samples")
umap_result = left_join(umap_result, clinical_umap, by = "samples")
for (feat in colnames(clinical_umap)[-1]){
col = c("UMAP1", "UMAP2", feat)
umap_ggplot = dplyr::select(umap_result, all_of(col))
colnames(umap_ggplot)[3] = "feat"
umap_plot <- ggplot(umap_ggplot, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal() +
labs(color = feat)
print(umap_plot)
}
