Compute_Samples_dendrogram(TPM)
dev.off()
}
# library(org.Hs.eg.db) # Homo sapiens db
# columns(org.Hs.eg.db) # to look at the columns of this db
# Plots - Heatmap
Compute_Samples_Heatmap <- function(TPM){
TPM <- as.matrix(TPM)
# Utilizes the NormalizeTPM function from the ADImpute package.
# Performs normalization on the 'TPM' data frame, considering TPM (Transcripts Per Million) values.
# Setting 'log = T' indicates that the normalization will be done using the logarithm of TPM values.
# This is often employed to reduce variance and approximate a normal distribution.
# Add 1 at the log log(TPM+1) so that 0 values are propertly calculated
sampleDists <- dist(TPM) #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,    main = "Sample clustering", sub="", xlab="",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Plots - Dendrogram
Compute_Samples_dendrogram <- function(TPM){
sampleTree = hclust(dist(t(TPM)), method = "average");
plot(sampleTree, main = "Samples clustering", sub="", xlab="",
cex.lab = 1, cex.axis = 1.5, cex.main = 2)
}
# Data Loading
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[1]][2]
folders_names <- strsplit(folders_names, split = files_names)
# EDA
for (i in 1:length(path)) {
TPM <- read.table(path[i], header = TRUE,  sep = '	', row.names = 1)
pdf(paste0("../IMMUCAN_data", folders_names[[i]][1], files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
Compute_Samples_Heatmap(TPM)
Compute_Samples_dendrogram(TPM)
dev.off()
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
# library(org.Hs.eg.db) # Homo sapiens db
# columns(org.Hs.eg.db) # to look at the columns of this db
# Plots - Heatmap
Compute_Samples_Heatmap <- function(TPM){
TPM <- as.matrix(TPM)
# Utilizes the NormalizeTPM function from the ADImpute package.
# Performs normalization on the 'TPM' data frame, considering TPM (Transcripts Per Million) values.
# Setting 'log = T' indicates that the normalization will be done using the logarithm of TPM values.
# This is often employed to reduce variance and approximate a normal distribution.
# Add 1 at the log log(TPM+1) so that 0 values are propertly calculated
sampleDists <- dist(TPM) #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,    main = "Sample clustering", sub="", xlab="",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Plots - Dendrogram
Compute_Samples_dendrogram <- function(TPM){
sampleTree = hclust(dist(t(TPM)), method = "average");
plot(sampleTree, main = "Samples clustering", sub="", xlab="",
cex.lab = 0.5, cex.axis = 1.5, cex.main = 2)
}
# Data Loading
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[1]][2]
folders_names <- strsplit(folders_names, split = files_names)
# EDA
for (i in 1:length(path)) {
TPM <- read.table(path[i], header = TRUE,  sep = '	', row.names = 1)
pdf(paste0("../IMMUCAN_data", folders_names[[i]][1], files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
Compute_Samples_Heatmap(TPM)
Compute_Samples_dendrogram(TPM)
dev.off()
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
# library(org.Hs.eg.db) # Homo sapiens db
# columns(org.Hs.eg.db) # to look at the columns of this db
# Plots - Heatmap
Compute_Samples_Heatmap <- function(TPM){
TPM <- as.matrix(TPM)
# Utilizes the NormalizeTPM function from the ADImpute package.
# Performs normalization on the 'TPM' data frame, considering TPM (Transcripts Per Million) values.
# Setting 'log = T' indicates that the normalization will be done using the logarithm of TPM values.
# This is often employed to reduce variance and approximate a normal distribution.
# Add 1 at the log log(TPM+1) so that 0 values are propertly calculated
sampleDists <- dist(TPM) #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,    main = "Sample clustering", sub="", xlab="",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Plots - Dendrogram
Compute_Samples_dendrogram <- function(TPM){
sampleTree = hclust(dist(TPM), method = "average");
plot(sampleTree, main = "Samples clustering", sub="", xlab="",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Data Loading
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[1]][2]
folders_names <- strsplit(folders_names, split = files_names)
# EDA
for (i in 1:length(path)) {
TPM <- read.table(path[i], header = TRUE,  sep = '	', row.names = 1)
pdf(paste0("../IMMUCAN_data", folders_names[[i]][1], files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
Compute_Samples_Heatmap(TPM)
Compute_Samples_dendrogram(TPM)
dev.off()
}
library(dplyr)
library(tibble)
library(tidyr)
library(org.Hs.eg.db) # Homo sapiens db
library(stringr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
library(ADImpute) # This package provides functions to compute TPM
library(ggplot2)
# Remove version number from ENSEMBL ID
remove_gene_version <- function(TPM) {
rownames(TPM) <- rownames(TPM) %>%
str_remove("\\..*$")
return(as.data.frame(TPM))
}
# Converting from ENSEMBL ID to GENE SYMBOL. Use org.Hs.eg.db db
EnsemblID_to_GeneSymbol <- function(raw_counts_file){
entrz <- AnnotationDbi::select(org.Hs.eg.db, keys = rownames(raw_counts_file), columns = "SYMBOL", keytype = "ENSEMBL") # keys are the data to overlap. columns is the column to replace and keytype is the column where to find corrispondences   # entrz is a df storing ENSEMBL ID and GENE SYMBOLS. ENSEMBL ID are selected by the ROW NAMES of your raw_counts_file
raw_counts_file <- raw_counts_file %>%
mutate(ENSEMBL = rownames(raw_counts_file)) %>% # add a column
inner_join(., entrz, by="ENSEMBL") %>% # join, merge df with a common column (ENSEMBL)
dplyr::filter(!is.na(SYMBOL)) %>%
distinct(SYMBOL, .keep_all = T) %>% # keep only one variable of the duplicated symbols
column_to_rownames("SYMBOL") %>%
dplyr::select(., -c("ENSEMBL"))
return(raw_counts_file)
}
# Raw counts to TPM. Need GENE SYMBOL!
counts_to_TPM <- function(raw_counts_file){
# log2(TPM+1)
TPM <- ADImpute::NormalizeTPM(raw_counts_file, log = T)
return(TPM)
}
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/02_TPM/BC2_estimated_TPM.RData")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[1]][2]
folders_names <- strsplit(folders_names, split = files_names)
samples_list <- read.table("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/Patient_to_include_from_rna_samples_bc2_to_create_custom_cohort.tsv", header = TRUE, sep = "\t")
# for loop in Counts_to_TPM
# TPM output for GEM-DeCan
# TPM_output <- data.frame(TPM) %>%
#   rownames_to_column("Genes")
# write.table(TPM_output, file = paste0("../IMMUCAN_data/", folders_names[[i]][1], "/02_TPM/", files_names[i],"_TPM.txt"), quote = F, sep = "\t", row.names = F)
# Load RData
load(path)
# Convert ENSEMBL ID with GENE SYMBOL
TPM <- remove_gene_version(gexp_tpm)
TPM <- EnsemblID_to_GeneSymbol(TPM)
# Filtering samples with the list samples_list
BC2_samples <- intersect(colnames(TPM), samples_list$sample)
BC2 <- TPM[BC2_samples] %>%
rownames_to_column("Genes")
# Write file in the correct format for deconvolution
files_names[1] = "BC2_TPM" # Change file name manually if you need
write.table(BC2, file = paste0("../IMMUCAN_data", folders_names[[1]][1], files_names[1],"_fromRdata.txt"), quote = F, sep = "\t", row.names = F)
message(paste("File saved in", paste0("../IMMUCAN_data", folders_names[[1]][1], files_names[1],"_fromRdata.txt")) )
View(gexp_tpm)
# Bar plot to see TPM distribution
BC2_long <- pivot_longer(BC2, cols = 2:ncol(BC2), names_to = "Samples", values_to = "TPM")
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_point()
ggplot(data = BC2_long, aes(x = factor(Samples), y = TPM)) +
geom_histogram() +
geom_point()
ggplot(data = BC2_long, aes(x = factor(Samples), y = TPM)) +
geom_point()
ggplot(data = BC2_long, aes(x = factor(Samples), y = TPM)) +
geom_point()
ggplot(data = BC2_long, aes(x = factor(Samples), y = TPM)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = BC2_long, aes(x = TPM, y = 0)) +
geom_jitter(width = 0, height = 0.1, size = 1, alpha = 0.5) +
xlab("Valori TPM") +
ylab("") +
ggtitle("Distribuzione dei valori TPM")
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "red")
BC2_long <- pivot_longer(BC2, cols = 2:ncol(BC2), names_to = "Samples", values_to = "TPM")
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "red")
scale_x_continuous(limits = c(0, 5000)) +
scale_y_continuous(limits = c(0, 10000))
scale_x_continuous(limits = c(0, 5000)) +
scale_y_continuous(limits = c(0, 10000))
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "red") +
scale_x_continuous(limits = c(0, 5000)) +
scale_y_continuous(limits = c(0, 10000))
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "red") +
scale_x_continuous(limits = c(-100, 5000)) +
scale_y_continuous(limits = c(-100, 10000))
BC2_long <- pivot_longer(BC2, cols = 2:ncol(BC2), names_to = "Samples", values_to = "TPM")
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, 5000)) +
scale_y_continuous(limits = c(-100, 30000))
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, 5000)) +
scale_y_continuous(limits = c(-100, 100000))
BC2_long <- pivot_longer(BC2, cols = 2:ncol(BC2), names_to = "Samples", values_to = "TPM")
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, 5000)) +
scale_y_continuous(limits = c(-100, 300000))
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, 5000)) +
scale_y_continuous(limits = c(-100, 800000))
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, 5000)) +
scale_y_log10()
BC2_long <- pivot_longer(BC2, cols = 2:ncol(BC2), names_to = "Samples", values_to = "TPM")
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, 5000)) +
scale_y_log10()
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "blue") +
scale_x_log10() +
scale_y_log10()
# scale_y_continuous(limits = c(-100, 800000))
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, 5000)) +
scale_y_log10()
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, 50000)) +
scale_y_log10()
BC2_long <- pivot_longer(BC2, cols = 2:ncol(BC2), names_to = "Samples", values_to = "TPM")
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, 50000)) +
scale_y_log10()
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, 80000)) +
scale_y_log10()
# scale_y_continuous(limits = c(-100, 800000))
BC2_long <- pivot_longer(BC2, cols = 2:ncol(BC2), names_to = "Samples", values_to = "TPM")
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, 0000)) +
scale_y_log10()
BC2_long <- pivot_longer(BC2, cols = 2:ncol(BC2), names_to = "Samples", values_to = "TPM")
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, 0000)) +
scale_y_log10()
# scale_y_continuous(limits = c(-100, 800000))
BC2_long <- pivot_longer(BC2, cols = 2:ncol(BC2), names_to = "Samples", values_to = "TPM")
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, 10000)) +
scale_y_log10()
# scale_y_continuous(limits = c(-100, 800000))
max(BC2_long)
View(BC2_long)
max(BC2_long$TPM)
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram() +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, max(BC2_long$TPM))) +
scale_y_log10()
BC2_long <- pivot_longer(BC2, cols = 2:ncol(BC2), names_to = "Samples", values_to = "TPM")
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram(binwidth = 10) +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, max(BC2_long$TPM))) +
scale_y_log10()
# scale_y_continuous(limits = c(-100, 800000))
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram(binwidth = 100) +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, max(BC2_long$TPM))) +
scale_y_log10()
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram(binwidth = 500) +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, max(BC2_long$TPM))) +
scale_y_log10()
ggplot(data = BC2_long, aes(x=TPM)) +
geom_histogram(binwidth = 1000) +
geom_rug(color = "blue") +
scale_x_continuous(limits = c(-100, max(BC2_long$TPM))) +
scale_y_log10()
# Summary
summary(BC2)
# Summary
summary(BC2(!"Genes"))
# Summary
summary(BC2[!"Genes"])
BC2[!"Genes"]
BC2["Genes"]
!BC2["Genes"]
# Summary
summary(select(BC2, !Genes))
select(BC2, !Genes)
library(dplyr)
library(tibble)
library(tidyr)
library(org.Hs.eg.db) # Homo sapiens db
library(stringr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
library(ADImpute) # This package provides functions to compute TPM
library(ggplot2)
select(BC2, !Genes)
select(BC2, Genes)
select(BC2, "Genes")
BC2_samples <- intersect(colnames(TPM), samples_list$sample)
BC2 <- TPM[BC2_samples] %>%
rownames_to_column("Genes")
select(BC2, "Genes")
select(BC2, Genes)
dplyr::select(BC2, Genes)
dplyr::select(BC2, !Genes)
summary(BC2[!Genes])
BC2[!Genes]
summary(BC2[-Genes])
BC2[-Genes]
BC2[-"Genes"]
BC2["Genes"]
BC2[!"Genes"]
!BC2["Genes"]
# Summary
summary(dplyr::select(BC2, !Genes))
# PCA
pca_result <- prcomp(BC2)
View(BC2)
column_to_rownames
column_to_rownames(data = BC2, var = "Genes")
column_to_rownames(BC2, var = "Genes")
BC2_df <- column_to_rownames(BC2, var = "Genes")
View(BC2_df)
pca_result <- prcomp(BC2-df)
pca_result <- prcomp(BC2_df)
pca_result
install.packages("FactoMineR")
View(pca_result)
View(pca_result)
plot(pca_result, type = "l")
install.packages("factoextra")
library(FactoMineR)
install.packages("FactoMineR")
install.packages("estimability")
install.packages("emmeans")
library(FactoMineR)
install.packages("/home/francesco.massaini/Downloads/estimability_1.4.tar.gz", repos = NULL, type = "source")
install.packages("FactoMineR")
install.packages("emmeans")
install.packages("/home/francesco.massaini/Downloads/emmeans_1.10.0.tar.gz", repos = NULL, type = "source")
install.packages("emmeans")
library(FactoMineR)
install.packages("/home/francesco.massaini/Downloads/emmeans_1.10.0.tar.gz", repos = NULL, type = "source")
remove.packages("estimability")
install.packages("/home/francesco.massaini/Downloads/estimability_1.4.1.tar.gz", repos = NULL, type = "source")
install.packages("/home/francesco.massaini/Downloads/emmeans_1.10.0.tar.gz", repos = NULL, type = "source")
install.packages("FactoMineR")
install.packages("factoextra")
library(FactoMineR)
library(factoextra)
pca_result <- PCA(BC2_df)
pca_result <- PCA(BC2_df, scale.unit = TRUE)
fviz_eig(pca_result)
fviz_eig(pca_result)
fviz_pca_biplot(pca_result, geom.ind = "point", geom.var = "arrow", col.ind = "cos2", col.var = "contrib")
fviz_pca_biplot(pca_result, geom.ind = "point",  col.ind = "cos2", col.var = "contrib")
geom.var = "arrow",
fviz_pca_biplot(pca_result, geom.ind = "point", geom.var = "arrow", col.ind = "cos2", col.var = "contrib")
fviz_pca_ind(pca_result)
BC2_df <- column_to_rownames(BC2, var = "Genes")
pca_result <- PCA(BC2_df, scale.unit = TRUE, graph = FALSE)
fviz_eig(pca_result)
fviz_pca_ind(pca_result)
fviz_pca_biplot(pca_result, geom.ind = "point", geom.var = "arrow", col.ind = "cos2", col.var = "contrib")
fviz_pca_ind(pca_result)
pca_result <- PCA(t(BC2_df), scale.unit = TRUE, graph = FALSE)
fviz_pca_ind(pca_result)
fviz_pca_biplot(pca_result, geom.ind = "point", geom.var = "arrow", col.ind = "cos2", col.var = "contrib")
fviz_pca_ind(pca_result)
fviz_pca_ind(pca_result, labels = NULL)
fviz_pca_ind(pca_result, labels = "")
fviz_pca_ind(pca_result, labels = "")
fviz_pca_ind(pca_result, labels = "none")
fviz_pca_ind(pca_result, geom.ind = "point")
fviz_pca_biplot(pca_result, geom.ind = "point", geom.var = "arrow", col.ind = "cos2", col.var = "contrib")
TPM_Heatmap(TPM)
# pdf(paste0("../IMMUCAN_data/", folders_names[[i]][1], "/02_Plot_Outliers/", files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
TPM_Heatmap(TPM)
# pdf(paste0("../IMMUCAN_data/", folders_names[[i]][1], "/02_Plot_Outliers/", files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
TPM_Heatmap(BC2)
# Remove version number from ENSEMBL ID
remove_gene_version <- function(TPM) {
rownames(TPM) <- rownames(TPM) %>%
str_remove("\\..*$")
return(as.data.frame(TPM))
}
# Converting from ENSEMBL ID to GENE SYMBOL. Use org.Hs.eg.db db
EnsemblID_to_GeneSymbol <- function(raw_counts_file){
entrz <- AnnotationDbi::select(org.Hs.eg.db, keys = rownames(raw_counts_file), columns = "SYMBOL", keytype = "ENSEMBL") # keys are the data to overlap. columns is the column to replace and keytype is the column where to find corrispondences   # entrz is a df storing ENSEMBL ID and GENE SYMBOLS. ENSEMBL ID are selected by the ROW NAMES of your raw_counts_file
raw_counts_file <- raw_counts_file %>%
mutate(ENSEMBL = rownames(raw_counts_file)) %>% # add a column
inner_join(., entrz, by="ENSEMBL") %>% # join, merge df with a common column (ENSEMBL)
dplyr::filter(!is.na(SYMBOL)) %>%
distinct(SYMBOL, .keep_all = T) %>% # keep only one variable of the duplicated symbols
column_to_rownames("SYMBOL") %>%
dplyr::select(., -c("ENSEMBL"))
return(raw_counts_file)
}
# Raw counts to TPM. Need GENE SYMBOL!
counts_to_TPM <- function(raw_counts_file){
# log2(TPM+1)
TPM <- ADImpute::NormalizeTPM(raw_counts_file, log = T)
return(TPM)
}
# Plots - Heatmap
TPM_Heatmap <- function(TPM){
TPM <- as.matrix(TPM)
# Utilizes the NormalizeTPM function from the ADImpute package.
# Performs normalization on the 'TPM' data frame, considering TPM (Transcripts Per Million) values.
# Setting 'log = T' indicates that the normalization will be done using the logarithm of TPM values.
# This is often employed to reduce variance and approximate a normal distribution.
# Add 1 at the log log(TPM+1) so that 0 values are propertly calculated
sampleDists <- dist(t(TPM)) #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,    main = "Sample clustering to detect outliers", sub="", xlab="",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Plots - Dendrogram
TPM_Sample_dendrogram <- function(TPM){
sampleTree = hclust(dist(t(TPM)), method = "average");
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# pdf(paste0("../IMMUCAN_data/", folders_names[[i]][1], "/02_Plot_Outliers/", files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
TPM_Heatmap(BC2)
rownames_to_column(BC2, val = "Genes")
rownames_to_column(BC2, "Genes")
# Load RData
load(path)
# Convert ENSEMBL ID with GENE SYMBOL
TPM <- remove_gene_version(gexp_tpm)
TPM <- EnsemblID_to_GeneSymbol(TPM)
# Filtering samples with the list samples_list
BC2_samples <- intersect(colnames(TPM), samples_list$sample)
BC2 <- TPM[BC2_samples]
files_names[1] = "BC2_TPM" # Change file name manually if you need
rownames_to_column(BC2, "Genes")
BC2 <- rownames_to_column(BC2, "Genes")
# Filtering samples with the list samples_list
BC2_samples <- intersect(colnames(TPM), samples_list$sample)
BC2 <- TPM[BC2_samples]
# pdf(paste0("../IMMUCAN_data/", folders_names[[i]][1], "/02_Plot_Outliers/", files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
TPM_Heatmap(BC2)
TPM_Sample_dendrogram(BC2)
# pdf(paste0("../IMMUCAN_data/", folders_names[[i]][1], "/02_Plot_Outliers/", files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
TPM_Heatmap(BC2)
TPM_Sample_dendrogram(BC2)
fviz_pca_ind(pca_result, geom.ind = "point")
pca_result <- PCA(t(BC2), scale.unit = TRUE, graph = FALSE) # t(BC2) because PCA takes rows
fviz_eig(pca_result)
fviz_eig(pca_result)
fviz_pca_ind(pca_result, geom.ind = "point")
fviz_pca_biplot(pca_result, geom.ind = "point", geom.var = "arrow", col.ind = "cos2", col.var = "contrib")
fviz_eig(pca_result)
fviz_pca_ind(pca_result, geom.ind = "point")
