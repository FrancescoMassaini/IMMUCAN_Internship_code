clustering_method = clustering_method,
legend_breaks = c(min(sampleDistMatrix), max(sampleDistMatrix)),
legend_labels = c("Similar", "Distant"),
border = NA)
} else {
cat("Patients are not in the same order")
}
}
# Heatmap on TPM - looking for groups and outliers
## Define the different methods for distance and clustering
distance_methods <- c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski")
clustering_methods <- c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty", "median", "centroid")
## Loop through each combination of distance and clustering methods
for (dist_method in distance_methods) {
for (clust_method in clustering_methods) {
# Output the method being used
cat("Using distance method:", dist_method, "and clustering method:", clust_method, "\n")
# Call the Compute_Heatmaps function with current methods
Compute_Heatmaps(expr_df = TPM_formatted_for_clinical,
sample_metadata_df = clinical,
distance_method = dist_method,
clustering_method = clust_method,
basic_pheatmap = FALSE)
}
}
# Save the file in the right format for BIODICA INDIPENDENT COMPONENT ANALYSIS (IDA)
TPM_forBIODICA = TPM_formatted_for_clinical %>%
rownames_to_column(var = "genes")
#write.table(TPM_forBIODICA, "/home/francesco.massaini/Projects/BIODICA/data/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
# Load MetaSample and MetaGene from BIODICA analysis.
metasample_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_A.xls", header = TRUE, row.names = 1)
# Load MetaSample and MetaGene from BIODICA analysis.
metasample_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_A.xls", header = TRUE, row.names = 1)
metagene_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_S.xls", header = TRUE, row.names = 1)
# Heatmap configuration
heatmap_colors <- colorRampPalette(c("navy", "white", "firebrick"))(100)
# Show results
metasample_df <- t(as.matrix(metasample_df))
identical(colnames(metasample_df), rownames(clinical))
pheatmap(metasample_df, main = "",
annotation_col = clinical,
color = heatmap_colors,
cluster_cols = TRUE,
show_colnames = T, show_rownames = T,
fontsize_col = 8, fontsize_row = 8, fontsize = 10, clustering_method = 'complete',
border = NA)
# Select most important ICs
chosen_IC = c("IC1", "IC8", "IC14", "IC4", "IC13", "IC16", "IC3")
metasample_df_selected <- metasample_df[chosen_IC, , drop = FALSE]
# PCA biplot on TPM
clinical <- clinical %>%
mutate_all(~ifelse(is.na(.), "NA", .)) # Replace NA with "NA" to show NA values on fviz_pca_biplot
# check if patients are in the same order
identical(rownames(clinical), colnames(TPM_formatted_for_clinical))
Compute_PCA_biplot(TPM_formatted_for_clinical, clinical)
# PCA biplot on TPM
clinical <- clinical %>%
mutate_all(~ifelse(is.na(.), "NA", .)) # Replace NA with "NA" to show NA values on fviz_pca_biplot
# check if patients are in the same order
identical(rownames(clinical), colnames(TPM_formatted_for_clinical))
Compute_PCA_biplot(TPM_formatted_for_clinical, clinical)
# Load MetaSample and MetaGene from BIODICA analysis.
metasample_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_A.xls", header = TRUE, row.names = 1)
metagene_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_S.xls", header = TRUE, row.names = 1)
# Heatmap configuration
heatmap_colors <- colorRampPalette(c("navy", "white", "firebrick"))(100)
# Show results
metasample_df <- t(as.matrix(metasample_df))
identical(colnames(metasample_df), rownames(clinical))
pheatmap(metasample_df, main = "",
annotation_col = clinical,
color = heatmap_colors,
cluster_cols = TRUE,
show_colnames = T, show_rownames = T,
fontsize_col = 8, fontsize_row = 8, fontsize = 10, clustering_method = 'complete',
border = NA)
# Select most important ICs
chosen_IC = c("IC1", "IC8", "IC14", "IC4", "IC13", "IC16", "IC3")
metasample_df_selected <- metasample_df[chosen_IC, , drop = FALSE]
# Load MetaSample and MetaGene from BIODICA analysis.
metasample_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_A.xls", header = TRUE, row.names = 1)
metagene_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_S.xls", header = TRUE, row.names = 1)
# Heatmap configuration
heatmap_colors <- colorRampPalette(c("navy", "white", "firebrick"))(100)
# Show results
metasample_df <- t(as.matrix(metasample_df))
identical(colnames(metasample_df), rownames(clinical))
pheatmap(metasample_df, main = "",
annotation_col = clinical,
color = heatmap_colors,
cluster_cols = TRUE,
show_colnames = T, show_rownames = T,
fontsize_col = 8, fontsize_row = 8, fontsize = 10, clustering_method = 'complete',
border = NA)
# Select most important ICs
chosen_IC = c("IC1", "IC8", "IC14", "IC4", "IC13", "IC16", "IC3")
metasample_df_selected <- metasample_df[chosen_IC, , drop = FALSE]
# Load MetaSample and MetaGene from BIODICA analysis.
metasample_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_A.xls", header = TRUE, row.names = 1)
metagene_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_S.xls", header = TRUE, row.names = 1)
# Heatmap configuration
heatmap_colors <- colorRampPalette(c("navy", "white", "firebrick"))(100)
# Show results
metasample_df <- t(as.matrix(metasample_df))
identical(colnames(metasample_df), rownames(clinical))
pheatmap(metasample_df, main = "",
annotation_col = clinical,
color = heatmap_colors,
cluster_cols = TRUE,
show_colnames = T, show_rownames = T,
fontsize_col = 8, fontsize_row = 8, fontsize = 10, clustering_method = 'complete',
border = NA)
# Select most important ICs
chosen_IC = c("IC1", "IC2", "IC5", "IC6", "IC7")
metasample_df_selected <- metasample_df[chosen_IC, , drop = FALSE]
# Plot final SAMPLE heatmap
pheatmap(metasample_df_selected, main = "",
annotation_col = clinical,
color = heatmap_colors,
cluster_cols = TRUE,
cluster_rows = TRUE,
show_colnames = T, show_rownames = T,
fontsize_col = 8, fontsize_row = 8, fontsize = 10, clustering_method = 'complete',
border = NA)
# Prepare the data
# Convert 'metasample_df' into a long format
long_metasample <- as.data.frame(t(metasample_df)) %>%
tibble::rownames_to_column("Sample") %>%
pivot_longer(-Sample, names_to = "IC", values_to = "Value")
# Generate violin plots for each IC for each clinical variable
clinical_vars = colnames(clinical) # List of clinical variables
ICs = unique(long_metasample$IC)
# Aggregate violin plot for each clinical variable
for (clin_var in clinical_vars) {
Wrapped_violin_plot_by_clinical_feature(df_long = long_metasample, metadata_df = clinical, metadata_var = clin_var, facet_wrap_var = "IC")
}
# Specific significant violin plot
for (clin_var in clinical_vars) {
for (IC_value in ICs){
df = long_metasample %>%
dplyr::filter(IC == IC_value) %>%
dplyr::select(Sample, IC, Value)
significant_violin_plot(df_long = df, metadata_df = clinical, metadata_var = clin_var, p_threshold = 0.05, main_title = paste("Significant violin plot for", IC_value))
}
}
# ADImpute to normalize to TPM
TPM_high_variance_genes <- counts_to_TPM(merged_counts_filtered_forClustering_gene_symbol, log = F) %>% # not yet log2 transformed
filter_low_variance_genes(., quantile_threshold = 0.75)
cat("Final nomber of genes: ", nrow(TPM_high_variance_genes))
compute_distribution(data = TPM_high_variance_genes, plot_title = "Distribution of high variance genes - TPM", xlab = "log2(TPM+1)", use_log = T) # log2(x+1)
# Finally convert TPM to log2(TPM+1)
TPM_high_variance_genes = log2(TPM_high_variance_genes+1)
TPM_formatted_for_clinical_high_variance = TPM_high_variance_genes
colnames(TPM_formatted_for_clinical_high_variance) = gsub(pattern = "-FIXT.*",
replacement = "",
x = colnames(TPM_formatted_for_clinical_high_variance))
TPM_formatted_for_clinical_high_variance <- TPM_formatted_for_clinical_high_variance[, common_samples]
# check if patients are in the same order
identical(rownames(clinical), colnames(TPM_formatted_for_clinical))
# Heatmap on high variance TPM, groups and outliers
Compute_Heatmaps(expr_df = TPM_formatted_for_clinical_high_variance,  sample_metadata_df = clinical, basic_pheatmap = TRUE)
# Save the file in the right format for BIODICA INDIPENDENT COMPONENT ANALYSIS (IDA)
TPM_forBIODICA = TPM_formatted_for_clinical_high_variance %>%
rownames_to_column(var = "genes")
write.table(TPM_forBIODICA, "/home/francesco.massaini/Projects/BIODICA/data/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_highly_variable_genes.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
# Adapt rownames of TPM to clinical ones
TPM_formatted_for_clinical_high_variance = TPM_high_variance_genes
colnames(TPM_formatted_for_clinical_high_variance) = gsub(pattern = "-FIXT.*",
replacement = "",
x = colnames(TPM_formatted_for_clinical_high_variance))
TPM_formatted_for_clinical_high_variance <- TPM_formatted_for_clinical_high_variance[, common_samples]
# check if patients are in the same order
identical(rownames(clinical), colnames(TPM_formatted_for_clinical))
# Heatmap on high variance TPM, groups and outliers
Compute_Heatmaps(expr_df = TPM_formatted_for_clinical_high_variance,  sample_metadata_df = clinical, basic_pheatmap = TRUE)
# Save the file in the right format for BIODICA INDIPENDENT COMPONENT ANALYSIS (IDA)
TPM_forBIODICA = TPM_formatted_for_clinical_high_variance %>%
rownames_to_column(var = "genes")
write.table(TPM_forBIODICA, "/home/francesco.massaini/Projects/BIODICA/data/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_highly_variable_genes.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
# PCA biplot on TPM
Compute_PCA_biplot(expr_df = TPM_formatted_for_clinical_high_variance, sample_metadata_df = clinical)
View(clinical)
# UMAP on high variance TPM
umap_result <- as.data.frame(umap(t(TPM_formatted_for_clinical_high_variance), n_neighbors = 8, min_dist = 0.1, metric = "euclidean")) # t() it's not necessary beacuse TPM has been already transposed
colnames(umap_result) <- c("UMAP1", "UMAP2")
umap_result = rownames_to_column(umap_result, var = "samples")
clinical_umap = rownames_to_column(clinical, var = "samples")
umap_result = left_join(umap_result, clinical_umap, by = "samples")
for (feat in colnames(clinical_umap)[-1]){
col = c("UMAP1", "UMAP2", feat)
umap_ggplot = dplyr::select(umap_result, all_of(col))
colnames(umap_ggplot)[3] = "feat"
umap_plot <- ggplot(umap_ggplot, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal() +
labs(color = feat)
print(umap_plot)
}
View(metasample_df)
metasample_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_highly_variable_genes_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_highly_variable_genes_ica_A.xls", header = TRUE, row.names = 1)
metagene_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_highly_variable_genes_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_highly_variable_genes_ica_S.xls", header = TRUE, row.names = 1)
View(long_metasample)
View(metasample_df)
identical(rownames(metasample_df), rownames(clinical))
# PCA biplot on TPM
Compute_PCA_biplot(expr_df = TPM_formatted_for_clinical_high_variance, sample_metadata_df = clinical)
# Load MetaSample and MetaGene from BIODICA analysis.
metasample_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_highly_variable_genes_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_highly_variable_genes_ica_A.xls", header = TRUE, row.names = 1)
metagene_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_highly_variable_genes_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_highly_variable_genes_ica_S.xls", header = TRUE, row.names = 1)
identical(rownames(metasample_df), rownames(clinical))
# Heatmap configuration
heatmap_colors <- colorRampPalette(c("navy", "white", "firebrick"))(100)
# Show results
metasample_df <- t(as.matrix(metasample_df))
identical(colnames(metasample_df), rownames(clinical))
pheatmap(metasample_df, main = "",
annotation_col = clinical,
color = heatmap_colors,
cluster_cols = TRUE,
show_colnames = T, show_rownames = T,
fontsize_col = 8, fontsize_row = 8, fontsize = 10, clustering_method = 'complete',
border = NA)
# Select most important ICs
chosen_IC = c("IC1", "IC2", "IC3", "IC9", "IC14", "IC11", "IC22")
metasample_df_selected <- metasample_df[chosen_IC, , drop = FALSE]
# Load MetaSample and MetaGene from BIODICA analysis.
metasample_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_highly_variable_genes_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_highly_variable_genes_ica_A.xls", header = TRUE, row.names = 1)
metagene_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_highly_variable_genes_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_highly_variable_genes_ica_S.xls", header = TRUE, row.names = 1)
identical(rownames(metasample_df), rownames(clinical))
# Heatmap configuration
heatmap_colors <- colorRampPalette(c("navy", "white", "firebrick"))(100)
# Show results
metasample_df <- t(as.matrix(metasample_df))
identical(colnames(metasample_df), rownames(clinical))
pheatmap(metasample_df, main = "",
annotation_col = clinical,
color = heatmap_colors,
cluster_cols = TRUE,
show_colnames = T, show_rownames = T,
fontsize_col = 8, fontsize_row = 8, fontsize = 10, clustering_method = 'complete',
border = NA)
# Select most important ICs
chosen_IC = c("IC1", "IC2", "IC3", "IC4")
metasample_df_selected <- metasample_df[chosen_IC, , drop = FALSE]
# Plot final SAMPLE heatmap
pheatmap(metasample_df_selected, main = "",
annotation_col = clinical,
color = heatmap_colors,
cluster_cols = TRUE,
cluster_rows = TRUE,
show_colnames = T, show_rownames = T,
fontsize_col = 8, fontsize_row = 8, fontsize = 10, clustering_method = 'complete',
border = NA)
# Prepare the data
# Convert into a long format
long_metasample <- as.data.frame(t(metasample_df_selected)) %>%
tibble::rownames_to_column("Sample") %>%
pivot_longer(-Sample, names_to = "IC", values_to = "Value")
# Generate violin plots for each IC for each clinical variable
clinical_vars = colnames(clinical) # List of clinical variables
ICs = unique(long_metasample$IC)
# Aggregate violin plot for each clinical variable
for (clin_var in clinical_vars) {
Wrapped_violin_plot_by_clinical_feature(df_long = long_metasample, metadata_df = clinical, metadata_var = clin_var, facet_wrap_var = "IC")
}
# Specific significant violin plot
for (clin_var in clinical_vars) {
for (IC_value in ICs){
df = long_metasample %>%
dplyr::filter(IC == IC_value) %>%
dplyr::select(Sample, IC, Value)
significant_violin_plot(df_long = df, metadata_df = clinical, metadata_var = clin_var, p_threshold = 0.05, main_title = paste("Significant violin plot for", IC_value))
}
}
#### NOTE: These are Adenocarcinoma samples #####
clinical = read.csv("../../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_Daniel_relevant_columns.csv", row.names = 1) # relevant clinical features already selected
# Loading Deconvolution results
deconv <- read.table("../../IMMUCAN_data/NSCLC2/03_Deconvolution/Whitout_CD226_and_without_patient3/all_deconvolutions_NSCLC2_TPM_withoutCD226_withoutPatient3.txt", header = TRUE,  sep = '	', row.names = 1)
View(deconv)
# Loading Deconvolution results
deconv <- read.table("../../IMMUCAN_data/NSCLC2/03_Deconvolution/Whitout_CD226_and_without_patient3/all_deconvolutions_NSCLC2_TPM_withoutCD226_withoutPatient3.txt", header = TRUE,  sep = '\t', row.names = 1)
rownames(deconv) = gsub(pattern = "-FIXT.*",
replacement = "",
x = rownames(deconv))
# Only common patients
common_samples <- intersect(rownames(clinical), rownames(deconv))
deconv <- deconv[common_samples,]
clinical = clinical[common_samples,]
# check if patients are in the same order
identical(rownames(clinical), colnames(TPM_formatted_for_clinical))
# check if patients are in the same order
identical(rownames(clinical), colnames(deconv))
# check if patients are in the same order
identical(rownames(clinical), rownames(deconv))
#### NOTE: These are Adenocarcinoma samples #####
clinical = read.csv("../../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_Daniel_relevant_columns.csv", row.names = 1) # relevant clinical features already selected
# Loading Deconvolution results
deconv <- read.table("../../IMMUCAN_data/NSCLC2/03_Deconvolution/Whitout_CD226_and_without_patient3/all_deconvolutions_NSCLC2_TPM_withoutCD226_withoutPatient3.txt", header = TRUE,  sep = '\t', row.names = 1)
rownames(deconv) = gsub(pattern = "-FIXT.*",
replacement = "",
x = rownames(deconv))
# Only common patients
common_samples <- intersect(rownames(clinical), rownames(deconv))
deconv <- deconv[common_samples,]
clinical = clinical[common_samples,]
# check if patients are in the same order
identical(rownames(clinical), rownames(deconv))
suppressMessages(library(dplyr))
suppressMessages(library(tibble))
suppressMessages(library(tidyr))
suppressMessages(library(org.Hs.eg.db)) # Homo sapiens db
suppressMessages(library(stringr))
suppressMessages(library(RColorBrewer)) # for plot
suppressMessages(library(pheatmap)) # for heatmaps
suppressMessages(library(ADImpute)) # This package provides functions to compute TPM
suppressMessages(library(ggplot2))
suppressMessages(library(FactoMineR))
suppressMessages(library(factoextra))
suppressMessages(library(survival))
suppressMessages(library(ranger))
suppressMessages(library(ggfortify))
suppressMessages(library(rlang))
suppressMessages(library(purrr))
suppressMessages(library(rio))
suppressMessages(library(uwot))
suppressMessages(library(DESeq2))
source("../Functions.R")
# Heatmap on TPM, groups and outliers
Compute_Heatmaps(expr_df = as.data.frame(t(deconv)),  sample_metadata_df = clinical, basic_pheatmap = TRUE)
View(deconv)
deconv > 1
View(deconv >1)
which(deconv>1)
View(deconv[which(deconv>1)])
View(deconv[which(deconv>1)])
View(deconv[which(deconv>1)])
View(deconv[which(deconv>1),])
columns_with_values_greater_than_one <- colnames(deconv)[apply(deconv, 2, function(x) any(x > 1))]
filtered_deconv <- deconv[, columns_with_values_greater_than_one]
View(filtered_deconv)
rowSums(filtered_deconv)
colSums(filtered_deconv)
install.packages("scales")
install.packages("scales")
# Some deconvolution methods have values >1. Let's scale this data
columns_with_values_greater_than_one <- colnames(deconv)[apply(deconv, 2, function(x) any(x > 1))]
filtered_deconv <- deconv[, columns_with_values_greater_than_one]
View(filtered_deconv) # only MCP method has values higher than 1
colSums(filtered_deconv)
deconv_scaled = apply(deconv[,columns_with_values_greater_than_one], 2,function(x) rescale(x, to = c(0,1)))
library(scales)
# Some deconvolution methods have values >1. Let's scale this data
columns_with_values_greater_than_one <- colnames(deconv)[apply(deconv, 2, function(x) any(x > 1))]
filtered_deconv <- deconv[, columns_with_values_greater_than_one]
View(filtered_deconv) # only MCP method has values higher than 1
colSums(filtered_deconv)
deconv_scaled = apply(deconv[,columns_with_values_greater_than_one], 2,function(x) rescale(x, to = c(0,1)))
# Some deconvolution methods have values >1. Let's scale this data
columns_with_values_greater_than_one <- colnames(deconv)[apply(deconv, 2, function(x) any(x > 1))]
filtered_deconv <- deconv[, columns_with_values_greater_than_one]
View(filtered_deconv) # only MCP method has values higher than 1
colSums(filtered_deconv)
deconv_scaled = apply(deconv[,columns_with_values_greater_than_one], 2,function(x) as.data.frame(rescale(x, to = c(0,1))))
View(deconv_scaled)
# Some deconvolution methods have values >1. Let's scale this data
columns_with_values_greater_than_one <- colnames(deconv)[apply(deconv, 2, function(x) any(x > 1))]
filtered_deconv <- deconv[, columns_with_values_greater_than_one]
#View(filtered_deconv) # only MCP method has values higher than 1
colSums(filtered_deconv)
deconv_scaled = deconv %>%
mutate(across(all_of(columns_with_values_greater_than_one)), ~ rescale(.x, to = c(0, 1)))
# Some deconvolution methods have values >1. Let's scale this data
columns_with_values_greater_than_one <- colnames(deconv)[apply(deconv, 2, function(x) any(x > 1))]
filtered_deconv <- deconv[, columns_with_values_greater_than_one]
#View(filtered_deconv) # only MCP method has values higher than 1
colSums(filtered_deconv)
deconv_scaled = deconv %>%
mutate(across(all_of(columns_with_values_greater_than_one), ~ rescale(.x, to = c(0, 1))))
# Heatmap on TPM, groups and outliers
Compute_Heatmaps(expr_df = as.data.frame(t(deconv_scaled)),  sample_metadata_df = clinical, basic_pheatmap = TRUE)
# Plots - Heatmap
# expr_df with patients as columns. clinical data with patients as rows. Return a final merged df with patient as columns
Compute_Heatmaps <- function(expr_df, sample_metadata_df = NULL,
basic_pheatmap = TRUE,
distance_method = "euclidean",
clustering_method = "complete") {
# Ensure same patients order
if (identical(colnames(expr_df), rownames(sample_metadata_df))){
# Compute Heatmap on expr values
if (basic_pheatmap == TRUE){
pheatmap(as.matrix(expr_df), main = "heatmap", # Here none clustering or distance parameters has been used
annotation_col = sample_metadata_df,
color = hcl.colors(50, "BluYl"),
show_colnames = TRUE, show_rownames = FALSE,
fontsize_col = 5, fontsize_row = 5, fontsize = 10)
#grid.text("genes", x=0.55, y=0.5, rot=270)
grid.text("patients", x=0.3, y=0.1, rot=0)
}
# Compute sample vs sample Heatmap
## Sample distance
sampleDists <- dist(t(expr_df), method = distance_method)
sampleDistMatrix <- as.matrix(sampleDists)
## Pheatmap creation
pheatmap(sampleDistMatrix, main = paste("Sample vs samples heatmap - distance:", distance_method, "clustering:" ,clustering_method),
annotation_col = sample_metadata_df,
color = hcl.colors(50, "BluYl"),
show_colnames = TRUE, show_rownames = TRUE,
fontsize_col = 5, fontsize_row = 5, fontsize = 10,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
clustering_method = clustering_method,
legend_breaks = c(min(sampleDistMatrix), max(sampleDistMatrix)),
legend_labels = c("Similar", "Distant"),
border = NA)
} else {
cat("Patients are not in the same order")
}
}
# Heatmap on TPM, groups and outliers
Compute_Heatmaps(expr_df = as.data.frame(t(deconv_scaled)),  sample_metadata_df = clinical, basic_pheatmap = TRUE)
# PCA biplot on Deconvolution
Compute_PCA_biplot(expr_df = as.data.frame(t(deconv_scaled)),  sample_metadata_df = clinical)
# PCA biplot on Deconvolution
Compute_PCA_biplot(expr_df = as.data.frame(t(deconv_scaled)),  sample_metadata_df = clinical)
table(clinical$TIL_score)
# Load MetaSample and MetaGene from BIODICA analysis.
metasample_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_A.xls", header = TRUE, row.names = 1)
metagene_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_Adenocarcinoma_meanDuplGenes_ICA/TPM_NSCLC2_Biodica_Adenocarcinoma_meanDuplGenes_ica_S.xls", header = TRUE, row.names = 1)
# Load MetaSample and MetaGene from BIODICA analysis.
metasample_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_A.xls", header = TRUE, row.names = 1)
metagene_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_Adenocarcinoma_meanDuplGenes_ica_S.xls", header = TRUE, row.names = 1)
# Load MetaSample and MetaGene from BIODICA analysis.
metasample_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_A.xls", header = TRUE, row.names = 1)
metagene_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_S.xls", header = TRUE, row.names = 1)
# Correlation
create_correlation_plot(data1 = deconv, data2 = metasample_df, correlation_type = "pearson", r_threshold = 0.7, p_threshold = 0.05)
suppressMessages(library(dplyr))
suppressMessages(library(tibble))
suppressMessages(library(tidyr))
suppressMessages(library(org.Hs.eg.db)) # Homo sapiens db
suppressMessages(library(stringr))
suppressMessages(library(RColorBrewer)) # for plot
suppressMessages(library(pheatmap)) # for heatmaps
suppressMessages(library(ADImpute)) # This package provides functions to compute TPM
suppressMessages(library(ggplot2))
suppressMessages(library(FactoMineR))
suppressMessages(library(factoextra))
suppressMessages(library(survival))
suppressMessages(library(ranger))
suppressMessages(library(ggfortify))
suppressMessages(library(rlang))
suppressMessages(library(purrr))
suppressMessages(library(rio))
suppressMessages(library(uwot))
suppressMessages(library(DESeq2))
source("../Functions.R")
# Load CellTFusion results
load("../../IMMUCAN_data/NSCLC2/04_CellTFusion/CellTFusion_Subgroups_NSCLC2.RData")
load("../../IMMUCAN_data/NSCLC2/04_CellTFusion/CellTFusion_tfs_NSCLC2.RData")
load("../../IMMUCAN_data/NSCLC2/04_CellTFusion/CellTFusion_modules_deconv_NSCLC2.RData")
deconv_subgroups = dt[["Deconvolution matrix"]]
TF_modules_deconv = as.data.frame(features_sig[[1]])
# Load clinical data
clinical = read.csv("../../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_Daniel_relevant_columns.csv", row.names = 1) # relevant clinical features already selected
identical(rownames(clinical), rownames(deconv_subgroups))
View(deconv_subgroups)
View(clinical)
setdiff((rownames(clinical), rownames(deconv_subgroups)))
setdiff(rownames(clinical), rownames(deconv_subgroups))
View(TF_modules_deconv)
View(tfs)
# Load clinical data
clinical = read.csv("../../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_Daniel_relevant_columns.csv", row.names = 1) # relevant clinical features already selected
# Only common patients
common_samples <- intersect(rownames(clinical), rownames(deconv_subgroups))
deconv_subgroups <- deconv_subgroups[common_samples,]
clinical = clinical[common_samples,]
tfs = tfs[common_samples,]
# check if patients are in the same order
identical(rownames(clinical), rownames(deconv_subgroups))
identical(rownames(clinical), rownames(tfs))
columns_with_values_greater_than_one <- colnames(deconv_subgroups)[apply(deconv_subgroups, 2, function(x) any(x > 1))]
filtered_deconv <- deconv_subgroups[, columns_with_values_greater_than_one]
View(filtered_deconv) # only MCP method has values higher than 1
# CellTFusion already takes into account MCP values >1
# Heatmap on deconvolution subgroups
Compute_Heatmaps(t(deconv_subgroups),  sample_feat_df = clinical, basic_pheatmap = TRUE)
# CellTFusion already takes into account MCP values >1
# Heatmap on deconvolution subgroups
Compute_Heatmaps(t(deconv_subgroups),  sample_metadata_df = clinical, basic_pheatmap = TRUE)
# PCA biplot on deconvolution subgroups
Compute_PCA_biplot(expr_df = deconv_subgroups, sample_metadata_df = clinical)
# PCA biplot on deconvolution subgroups
Compute_PCA_biplot(expr_df = t(deconv_subgroups), sample_metadata_df = clinical)
# PCA biplot on deconvolution subgroups
Compute_PCA_biplot(expr_df = t(deconv_subgroups), sample_metadata_df = clinical)
# Load MetaSample and MetaGene from BIODICA analysis.
metasample_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_A.xls", header = TRUE, row.names = 1)
metagene_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_S.xls", header = TRUE, row.names = 1)
# Correlation
create_correlation_plot(data1 = deconv_subgroups, data2 = metasample_df, correlation_type = "pearson", r_threshold = 0.7, p_threshold = 0.05)
Compute_Heatmaps(t(tfs),  sample_metadata_df = clinical, basic_pheatmap = TRUE)
# PCA biplot on tf activity matrix
Compute_PCA_biplot(expr_df = t(deconv_subgroups), sample_metadata_df = clinical)
# PCA biplot on tf activity matrix
Compute_PCA_biplot(expr_df = t(deconv_subgroups), sample_metadata_df = clinical)
# Load MetaSample and MetaGene from BIODICA analysis.
metasample_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_A.xls", header = TRUE, row.names = 1)
metagene_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_S.xls", header = TRUE, row.names = 1)
# Correlation
create_correlation_plot(data1 = tfs, data2 = metasample_df, correlation_type = "pearson", r_threshold = 0.7, p_threshold = 0.05)
