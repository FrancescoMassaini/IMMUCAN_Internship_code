merged_counts <- read.delim(txt_input_files[1], header = 0, row.names = 1)
colnames(merged_counts) <- samples_names[1]
colSums(merged_counts) # Not yet normalized to TPM
for (i in 2:length(txt_input_files)) {
# Leggi il data frame successivo
counts <- read.delim(txt_input_files[i], header = 0, row.names = 1)
colnames(counts) <- samples_names[i]
# Unisci le colonne del nuovo data frame a merged_counts
merged_counts <- cbind(merged_counts, counts)
}
merged_counts <- merged_counts %>%
filter(!rownames(.) %in% c("__no_feature", "__ambiguous", "__too_low_aQual", "__not_aligned", "__alignment_not_unique")) %>%
remove_gene_version() %>%
EnsemblID_to_GeneSymbol()
# ADImpute to normalize to TPM
TPM <- counts_to_TPM(merged_counts)
# write.table(TPM, "../IMMUCAN_data/NSCLC2/02_TPM/NSCLC2_TPM.txt")
# Summary and check TPM
summary(TPM)
colSums(TPM) # NOTE, this doesn't sum up to 1 million anymore because when you convert ENSEMBL IDs to GENE SYMBOLS some genes are lost because of duplicates names
TPM_with_genes <- TPM %>%
rownames_to_column(var = "Gene")
TPM_long <- pivot_longer(TPM_with_genes,
cols = -Gene,
names_to = "Patient",
values_to = "TPM")
ggplot(TPM_long, aes(x = log1p(TPM)))+
geom_density()+ theme_bw() +
labs(title = "log(TPM+1) Distribution",
x = "log(TPM + 1)",
y = "Density")
# Load clinical data
clinical = read.csv("../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
dplyr::select(immucan_id, stage, death, neo_adjuvant_treatment, adjuvant_treatment, simple_histology, long_survivors, TIL_score) %>%
column_to_rownames(var = "immucan_id")
# Adapt rownames of TPM to clinical ones
TPM_clinical = TPM
colnames(TPM_clinical) = gsub(pattern = "-FIXT.*",
replacement = "",
x = colnames(TPM_clinical))
common_samples <- intersect(rownames(clinical), colnames(TPM_clinical))
TPM_clinical <- TPM_clinical %>% dplyr::select(all_of(common_samples))
clinical <- clinical[rownames(clinical) %in% common_samples, ]
# Heatmap and dendrogram to see patient outliers on TPM
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_heatmap.pdf"), width = 16, height = 16)
Compute_Samples_Heatmap(TPM_clinical,  sample_feat_df = clinical, main_title = "Heatmap samples vs samples - Euclidian distance matrix on TPM data")
# dev.off()
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_dendrogram.pdf"), width = 16, height = 10)
for (feat in colnames(clinical)){
tree = Compute_Samples_dendrogram(TPM_clinical,  sample_feat_df = clinical, feat_column = feat, main_title = "Sample dendrogram - Euclidian distance matrix on TPM data")
print(tree)
}
# dev.off()
# PCA biplot on TPM
pca_result <- FactoMineR::PCA(t(TPM_clinical), scale.unit = TRUE, graph = FALSE) # t(BC2) because PCA takes rows
fviz_eig(pca_result) # Scree plot: explained variances by PC
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_PCA.pdf"))
for (feat in colnames(clinical)){
p = factoextra::fviz_pca_biplot(pca_result, repel = T, select.var = list(contrib = 5), label = "var",
habillage = as.factor(clinical[,feat]),
addEllipses = T, ellipse.level=0.85, palette = "Dark2",
legend.title = feat,
ggtheme = theme_minimal())
print(p)
}
# repel = T do not overlap the text, select.var = list(contrib = 5) shows only the most 5 variable feature (variables) that contributes to separation. label = var , put label ONLY on the 5 variables
# dev.off()
# UMAP on TPM
umap_result <- umap(t(TPM_clinical), n_neighbors = 15, min_dist = 0.1, metric = "euclidean")
View(umap_result)
# UMAP on TPM
umap_result <- as.data.frame(umap(t(TPM_clinical), n_neighbors = 15, min_dist = 0.1, metric = "euclidean"))
colnames(umap_df) <- c("UMAP1", "UMAP2")
colnames(umap_result) <- c("UMAP1", "UMAP2")
View(clinical)
umap_result = left_join(umap_result, clinical, by = rownames)
umap_result = rownames_to_column(umap_result, var = "samples")
clinical = rownames_to_column(clinical, var = "samples")
umap_result = left_join(umap_result, clinical, by = samples)
umap_result = left_join(umap_result, clinical, by = "samples")
umap_plot <- ggplot(umap_result, aes(x = UMAP1, y = UMAP2, color = TIL_score)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal()
# Mostra il plot
print(umap_plot)
for (feat in colnames(clinical)){
umap_plot <- ggplot(umap_result, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal()
}
for (feat in colnames(clinical)){
umap_plot <- ggplot(umap_result, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal()
print(umap_plot)
}
for (feat in colnames(clinical)){
umap_plot <- ggplot(umap_result, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal()
print(umap_plot)
}
colnames(clinical)
for (feat in colnames(clinical)){
for (feat in colnames(clinical)){
for (feat in colnames(clinical)){
umap_ggplot = dplyr::select(umap_result, all_of(c("UMAP1", "UMAP2", feat = feat)))
umap_plot <- ggplot(umap_ggplot, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal()
print(umap_plot)
}
for (feat in colnames(clinical)){
umap_ggplot = dplyr::select(umap_result, all_of(c("UMAP1", "UMAP2", feat)))
umap_plot <- ggplot(umap_ggplot, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal()
print(umap_plot)
}
col = c("UMAP1", "UMAP2", feat)
col
col = c("UMAP1", "UMAP2", feat)
for (feat in colnames(clinical)){
col = c("UMAP1", "UMAP2", feat)
umap_ggplot = dplyr::select(umap_result, all_of(col))
umap_plot <- ggplot(umap_ggplot, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal()
print(umap_plot)
}
View(umap_ggplot)
for (feat in colnames(clinical)){
col = c("UMAP1", "UMAP2", feat)
umap_ggplot = dplyr::select(umap_result, all_of(col))
colnames(umap_ggplot)[3] = "feat"
umap_plot <- ggplot(umap_ggplot, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal()
print(umap_plot)
}
for (feat in colnames(clinical)){
col = c("UMAP1", "UMAP2", feat)
umap_ggplot = dplyr::select(umap_result, all_of(col))
colnames(umap_ggplot)[3] = "feat"
umap_plot <- ggplot(umap_ggplot, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal() +
labs(color = feat)
print(umap_plot)
}
length(colnames(clinical))
for (feat in colnames(clinical)[-1]){
col = c("UMAP1", "UMAP2", feat)
umap_ggplot = dplyr::select(umap_result, all_of(col))
colnames(umap_ggplot)[3] = "feat"
umap_plot <- ggplot(umap_ggplot, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal() +
labs(color = feat)
print(umap_plot)
}
suppressMessages(library(dplyr))
suppressMessages(library(tibble))
suppressMessages(library(tidyr))
suppressMessages(library(org.Hs.eg.db)) # Homo sapiens db
suppressMessages(library(stringr))
suppressMessages(library(RColorBrewer)) # for plot
suppressMessages(library(pheatmap)) # for heatmaps
suppressMessages(library(ADImpute)) # This package provides functions to compute TPM
suppressMessages(library(ggplot2))
suppressMessages(library(FactoMineR))
suppressMessages(library(factoextra))
suppressMessages(library(survival))
suppressMessages(library(ranger))
suppressMessages(library(ggfortify))
suppressMessages(library(rlang))
suppressMessages(library(purrr))
suppressMessages(library(rio))
suppressMessages(library(uwot))
source("./Functions.R")
# Imposta il percorso della cartella
input_folder <- "../IMMUCAN_data/NSCLC2/01_Raw_Counts/star_counts"
output_folder_TPM <- "../IMMUCAN_data/NSCLC2/02_TPM/"
output_folder_TPM_outlier <- "../IMMUCAN_data/NSCLC2/02_Plot_Outliers/"
output_folder_deconvolution <- "../IMMUCAN_data/NSCLC2/03_Deconvolution/Whitout_CD226_and_without_patient3/"
output_folder_CellTFusion <- "../IMMUCAN_data/NSCLC2/04_CellTFusion/Whitout_CD226_and_without_patient3/"
# Ottieni tutti i file .txt nella cartella
txt_input_files <- list.files(path = input_folder, pattern = "\\.txt$", full.names = TRUE)
# Stampa il contenuto della variabile txt_files
# print(txt_input_files)
files_names <- gsub(".txt$", "", basename(txt_input_files))
samples_names = str_split_i(files_names, "_", 1)
# Merging all the patients files, filtering rows of input files, removing gene version, and converting to GENE SYMBOLS
merged_counts <- read.delim(txt_input_files[1], header = 0, row.names = 1)
colnames(merged_counts) <- samples_names[1]
colSums(merged_counts) # Not yet normalized to TPM
for (i in 2:length(txt_input_files)) {
# Leggi il data frame successivo
counts <- read.delim(txt_input_files[i], header = 0, row.names = 1)
colnames(counts) <- samples_names[i]
# Unisci le colonne del nuovo data frame a merged_counts
merged_counts <- cbind(merged_counts, counts)
}
merged_counts <- merged_counts %>%
filter(!rownames(.) %in% c("__no_feature", "__ambiguous", "__too_low_aQual", "__not_aligned", "__alignment_not_unique")) %>%
remove_gene_version() %>%
EnsemblID_to_GeneSymbol()
# ADImpute to normalize to TPM
TPM <- counts_to_TPM(merged_counts)
# write.table(TPM, "../IMMUCAN_data/NSCLC2/02_TPM/NSCLC2_TPM.txt")
# Summary and check TPM
summary(TPM)
colSums(TPM) # NOTE, this doesn't sum up to 1 million anymore because when you convert ENSEMBL IDs to GENE SYMBOLS some genes are lost because of duplicates names
TPM_with_genes <- TPM %>%
rownames_to_column(var = "Gene")
TPM_long <- pivot_longer(TPM_with_genes,
cols = -Gene,
names_to = "Patient",
values_to = "TPM")
ggplot(TPM_long, aes(x = log1p(TPM)))+
geom_density()+ theme_bw() +
labs(title = "log(TPM+1) Distribution",
x = "log(TPM + 1)",
y = "Density")
# Load clinical data
clinical = read.csv("../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
dplyr::select(immucan_id, stage, death, neo_adjuvant_treatment, adjuvant_treatment, simple_histology, long_survivors, TIL_score) %>%
column_to_rownames(var = "immucan_id")
# Adapt rownames of TPM to clinical ones
TPM_clinical = TPM
colnames(TPM_clinical) = gsub(pattern = "-FIXT.*",
replacement = "",
x = colnames(TPM_clinical))
common_samples <- intersect(rownames(clinical), colnames(TPM_clinical))
TPM_clinical <- TPM_clinical %>% dplyr::select(all_of(common_samples))
clinical <- clinical[rownames(clinical) %in% common_samples, ]
# Heatmap on TPM, groups and outliers
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_heatmap.pdf"), width = 16, height = 16)
Compute_Samples_Heatmap(TPM_clinical,  sample_feat_df = clinical, main_title = "Heatmap samples vs samples - Euclidian distance matrix on TPM data")
# dev.off()
# Sample dendrograms, colored by relevant clinical feature
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_dendrogram.pdf"), width = 16, height = 10)
for (feat in colnames(clinical)){
tree = Compute_Samples_dendrogram(TPM_clinical,  sample_feat_df = clinical, feat_column = feat, main_title = "Sample dendrogram - Euclidian distance matrix on TPM data")
print(tree)
}
# dev.off()
# PCA biplot on TPM
pca_result <- FactoMineR::PCA(t(TPM_clinical), scale.unit = TRUE, graph = FALSE) # t(BC2) because PCA takes rows
fviz_eig(pca_result) # Scree plot: explained variances by PC
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_PCA.pdf"))
for (feat in colnames(clinical)){
p = factoextra::fviz_pca_biplot(pca_result, repel = T, select.var = list(contrib = 5), label = "var",
habillage = as.factor(clinical[,feat]),
addEllipses = T, ellipse.level=0.85, palette = "Dark2",
legend.title = feat,
ggtheme = theme_minimal())
print(p)
}
# repel = T do not overlap the text, select.var = list(contrib = 5) shows only the most 5 variable feature (variables) that contributes to separation. label = var , put label ONLY on the 5 variables
# dev.off()
# UMAP on TPM
umap_result <- as.data.frame(umap(t(TPM_clinical), n_neighbors = 15, min_dist = 0.1, metric = "euclidean"))
colnames(umap_result) <- c("UMAP1", "UMAP2")
umap_result = rownames_to_column(umap_result, var = "samples")
clinical = rownames_to_column(clinical, var = "samples")
umap_result = left_join(umap_result, clinical, by = "samples")
for (feat in colnames(clinical)[-1]){
col = c("UMAP1", "UMAP2", feat)
umap_ggplot = dplyr::select(umap_result, all_of(col))
colnames(umap_ggplot)[3] = "feat"
umap_plot <- ggplot(umap_ggplot, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal() +
labs(color = feat)
print(umap_plot)
}
# Deconvoltion Data Loading
input_folder_deconvolution <- "../IMMUCAN_data/NSCLC2/03_Deconvolution/Whitout_CD226_and_without_patient3/"
output_folder_deconvolution <- "../IMMUCAN_data/NSCLC2/03_Deconvolution/Whitout_CD226_and_without_patient3/"
txt_input_files_deconvolution <- c("../IMMUCAN_data/NSCLC2/03_Deconvolution/Whitout_CD226_and_without_patient3/all_deconvolutions_NSCLC2_TPM_withoutCD226_withoutPatient3.txt")
files_names_deconvolution <- gsub(".txt$", "", basename(txt_input_files_deconvolution))
deconv <- read.table(txt_input_files_deconvolution, header = TRUE,  sep = '	', row.names = 1)
# UMAP on TPM
umap_result <- as.data.frame(umap(t(TPM_clinical), n_neighbors = 8, min_dist = 0.1, metric = "euclidean"))
# UMAP on TPM
umap_result <- as.data.frame(umap(t(TPM_clinical), n_neighbors = 8, min_dist = 0.1, metric = "euclidean"))
colnames(umap_result) <- c("UMAP1", "UMAP2")
umap_result = rownames_to_column(umap_result, var = "samples")
clinical = rownames_to_column(clinical, var = "samples")
clinical_umap = rownames_to_column(clinical, var = "samples")
# Load clinical data
clinical = read.csv("../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
dplyr::select(immucan_id, stage, death, neo_adjuvant_treatment, adjuvant_treatment, simple_histology, long_survivors, TIL_score) %>%
column_to_rownames(var = "immucan_id")
# UMAP on TPM
umap_result <- as.data.frame(umap(t(TPM_clinical), n_neighbors = 8, min_dist = 0.1, metric = "euclidean"))
colnames(umap_result) <- c("UMAP1", "UMAP2")
umap_result = rownames_to_column(umap_result, var = "samples")
clinical_umap = rownames_to_column(clinical, var = "samples")
umap_result = left_join(umap_result, clinical_umap, by = "samples")
for (feat in colnames(clinical_umap)[-1]){
col = c("UMAP1", "UMAP2", feat)
umap_ggplot = dplyr::select(umap_result, all_of(col))
colnames(umap_ggplot)[3] = "feat"
umap_plot <- ggplot(umap_ggplot, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal() +
labs(color = feat)
print(umap_plot)
}
# UMAP on TPM
umap_result <- as.data.frame(umap(t(TPM_clinical), n_neighbors = 6, min_dist = 0.1, metric = "euclidean"))
colnames(umap_result) <- c("UMAP1", "UMAP2")
umap_result = rownames_to_column(umap_result, var = "samples")
clinical_umap = rownames_to_column(clinical, var = "samples")
umap_result = left_join(umap_result, clinical_umap, by = "samples")
for (feat in colnames(clinical_umap)[-1]){
col = c("UMAP1", "UMAP2", feat)
umap_ggplot = dplyr::select(umap_result, all_of(col))
colnames(umap_ggplot)[3] = "feat"
umap_plot <- ggplot(umap_ggplot, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal() +
labs(color = feat)
print(umap_plot)
}
# UMAP on TPM
umap_result <- as.data.frame(umap(t(TPM_clinical), n_neighbors = 8, min_dist = 0.1, metric = "euclidean"))
colnames(umap_result) <- c("UMAP1", "UMAP2")
umap_result = rownames_to_column(umap_result, var = "samples")
clinical_umap = rownames_to_column(clinical, var = "samples")
umap_result = left_join(umap_result, clinical_umap, by = "samples")
for (feat in colnames(clinical_umap)[-1]){
col = c("UMAP1", "UMAP2", feat)
umap_ggplot = dplyr::select(umap_result, all_of(col))
colnames(umap_ggplot)[3] = "feat"
umap_plot <- ggplot(umap_ggplot, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal() +
labs(color = feat)
print(umap_plot)
}
# Sample clustering
# png(paste0(output_folder_deconvolution, files_names_deconvolution, "_deconvolution_samples_heatmap.png"), width = 2000, height = 2000)
Compute_Samples_Heatmap(t(deconv)) # double t() (here and in the function) to take into account rows
View(deconv)
deconv <- read.table(txt_input_files_deconvolution, header = TRUE,  sep = '	', row.names = 1) %>%
colnames(deconv) = gsub(pattern = "-FIXT.*",
replacement = "",
x = colnames(deconv))
deconv <- read.table(txt_input_files_deconvolution, header = TRUE,  sep = '	', row.names = 1) %>%
colnames(deconv) = gsub(pattern = "-FIXT.*",
replacement = "",
x = colnames(deconv))
deconv <- read.table(txt_input_files_deconvolution, header = TRUE,  sep = '	', row.names = 1)
colnames(deconv) = gsub(pattern = "-FIXT.*",
replacement = "",
x = colnames(deconv))
common_samples <- intersect(rownames(clinical), rownames(deconv))
deconv <- deconv %>% dplyr::select(all_of(common_samples))
common_samples <- intersect(rownames(clinical), rownames(deconv))
deconv <- deconv %>% dplyr::filter(all_of(common_samples))
deconv <- read.table(txt_input_files_deconvolution, header = TRUE,  sep = '	', row.names = 1)
colnames(deconv) = gsub(pattern = "-FIXT.*",
replacement = "",
x = colnames(deconv))
common_samples <- intersect(rownames(clinical), rownames(deconv))
deconv <- deconv %>% dplyr::filter(all_of(common_samples))
deconv <- read.table(txt_input_files_deconvolution, header = TRUE,  sep = '	', row.names = 1)
colnames(deconv) = gsub(pattern = "-FIXT.*",
replacement = "",
x = colnames(deconv))
common_samples <- intersect(rownames(clinical), rownames(deconv))
deconv <- deconv %>% dplyr::filter(common_samples)
View(clinical)
rownames(deconv) = gsub(pattern = "-FIXT.*",
replacement = "",
x = colnames(deconv))
rownames(deconv) = gsub(pattern = "-FIXT.*",
replacement = "",
x = rownames(deconv))
common_samples <- intersect(rownames(clinical), rownames(deconv))
deconv <- deconv %>% dplyr::filter(common_samples)
common_samples <- which(intersect(rownames(clinical), rownames(deconv)))
deconv <- deconv %>% dplyr::filter(all_of(common_samples))
deconv <- deconv[common_samples,]
View(deconv)
# Sample clustering
# png(paste0(output_folder_deconvolution, files_names_deconvolution, "_deconvolution_samples_heatmap.png"), width = 2000, height = 2000)
Compute_Samples_Heatmap(t(deconv),  sample_feat_df = clinical, main_title = "Heatmap deconvolution - samples vs samples - Euclidian distance matrix on TPM data") # double t() (here and in the function) to take into account rows
#png(paste0(output_folder_deconvolution, files_names_deconvolution, "_deconvolution_samples_clustering.png"), width = 2000, height = 1000)
Compute_Samples_dendrogram(t(deconv))
#png(paste0(output_folder_deconvolution, files_names_deconvolution, "_deconvolution_samples_clustering.png"), width = 2000, height = 1000)
for (feat in colnames(clinical)){
tree = Compute_Samples_dendrogram(t(deconv),  sample_feat_df = clinical, feat_column = feat, main_title = "Sample dendrogram on deconvolution - Euclidian distance matrix on TPM data")
print(tree)
}
clinical <- clinical[rownames(clinical) %in% common_samples, ]
# UMAP on TPM
umap_result <- as.data.frame(umap(t(TPM_clinical), n_neighbors = 8, min_dist = 0.1, metric = "euclidean"))
colnames(umap_result) <- c("UMAP1", "UMAP2")
umap_result = rownames_to_column(umap_result, var = "samples")
clinical_umap = rownames_to_column(clinical, var = "samples")
umap_result = left_join(umap_result, clinical_umap, by = "samples")
for (feat in colnames(clinical_umap)[-1]){
col = c("UMAP1", "UMAP2", feat)
umap_ggplot = dplyr::select(umap_result, all_of(col))
colnames(umap_ggplot)[3] = "feat"
umap_plot <- ggplot(umap_ggplot, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal() +
labs(color = feat)
print(umap_plot)
}
# Sample clustering
# png(paste0(output_folder_deconvolution, files_names_deconvolution, "_deconvolution_samples_heatmap.png"), width = 2000, height = 2000)
Compute_Samples_Heatmap(t(deconv),  sample_feat_df = clinical, main_title = "Heatmap deconvolution - samples vs samples - Euclidian distance matrix on deconvolution") # double t() (here and in the function) to take into account rows
#png(paste0(output_folder_deconvolution, files_names_deconvolution, "_deconvolution_samples_clustering.png"), width = 2000, height = 1000)
for (feat in colnames(clinical)){
tree = Compute_Samples_dendrogram(t(deconv),  sample_feat_df = clinical, feat_column = feat, main_title = "Sample dendrogram on deconvolution - Euclidian distance matrix on TPM data")
print(tree)
}
# PCA on Deconvolution results
pca_result <- FactoMineR::PCA(deconv, scale.unit = FALSE, graph = FALSE) # scale.unit
fviz_eig(pca_result) # Scree plot: explained variances by PC
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_PCA.pdf"))
for (feat in colnames(clinical)){
p = factoextra::fviz_pca_biplot(pca_result, repel = T, select.var = list(contrib = 5), label = "var",
habillage = as.factor(clinical[,feat]),
addEllipses = T, ellipse.level=0.85, palette = "Dark2",
legend.title = feat,
ggtheme = theme_minimal())
print(p)
}
# repel = T do not overlap the text, select.var = list(contrib = 5) shows only the most 5 variable feature (variables) that contributes to separation. label = var , put label ONLY on the 5 variables
# dev.off()
# Load clinical data
clinical = read.csv("../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
dplyr::select(immucan_id, stage, death, neo_adjuvant_treatment, adjuvant_treatment, simple_histology, long_survivors, TIL_score) %>%
column_to_rownames(var = "immucan_id")
# Adapt rownames of TPM to clinical ones
TPM_clinical = TPM
colnames(TPM_clinical) = gsub(pattern = "-FIXT.*",
replacement = "",
x = colnames(TPM_clinical))
common_samples <- intersect(rownames(clinical), colnames(TPM_clinical))
TPM_clinical <- TPM_clinical %>% dplyr::select(all_of(common_samples))
clinical <- clinical[rownames(clinical) %in% common_samples, ]
# Heatmap on TPM, groups and outliers
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_heatmap.pdf"), width = 16, height = 16)
Compute_Samples_Heatmap(TPM_clinical,  sample_feat_df = clinical, main_title = "Heatmap samples vs samples - Euclidian distance matrix on TPM data")
# dev.off()
# Sample clustering
# png(paste0(output_folder_deconvolution, files_names_deconvolution, "_deconvolution_samples_heatmap.png"), width = 2000, height = 2000)
Compute_Samples_Heatmap(t(deconv),  sample_feat_df = clinical, main_title = "Heatmap deconvolution - samples vs samples - Euclidian distance matrix on deconvolution") # double t() (here and in the function) to take into account rows
# dev.off()
#png(paste0(output_folder_deconvolution, files_names_deconvolution, "_deconvolution_samples_clustering.png"), width = 2000, height = 1000)
for (feat in colnames(clinical)){
tree = Compute_Samples_dendrogram(t(deconv),  sample_feat_df = clinical, feat_column = feat, main_title = "Sample dendrogram on deconvolution - Euclidian distance matrix on TPM data")
print(tree)
}
#dev.off()
# PCA
pca_result <- PCA(deconv, scale.unit = TRUE, graph = FALSE)
fviz_eig(pca_result)
# png(paste0(output_folder_deconvolution, "deconvolution_samples_PCA.png"))
factoextra::fviz_pca_biplot(pca_result, repel = T, select.var = list(contrib = 5), label = "var") # repel = T do not overlap the text, select.var = list(contrib = 5) shows only the most 5 variable feature (variables) that contributes to separation. label = var , put label ONLY on the 5 variables
# dev.off()
# UMAP on Deconvolution data
umap_result <- as.data.frame(umap(deconv, n_neighbors = 8, min_dist = 0.1, metric = "euclidean"))
colnames(umap_result) <- c("UMAP1", "UMAP2")
umap_result = rownames_to_column(umap_result, var = "samples")
clinical_umap = rownames_to_column(clinical, var = "samples")
umap_result = left_join(umap_result, clinical_umap, by = "samples")
for (feat in colnames(clinical_umap)[-1]){
col = c("UMAP1", "UMAP2", feat)
umap_ggplot = dplyr::select(umap_result, all_of(col))
colnames(umap_ggplot)[3] = "feat"
umap_plot <- ggplot(umap_ggplot, aes(x = UMAP1, y = UMAP2, color = feat)) +
geom_point(size = 3) +
labs(title = "UMAP of TPM Data", x = "UMAP1", y = "UMAP2") +
theme_minimal() +
labs(color = feat)
print(umap_plot)
}
View(clinical)
View(counts)
View(TPM)
View(deconv)
BiocManager::install("DESeq2")
suppressMessages(library(deseq2))
suppressMessages(library(DESeq2))
BiocManager::install(c("GenomicRanges", "SummarizedExperiment"))
BiocManager::install("GenomicRanges", force = TRUE)
BiocManager::install("SummarizedExperiment", force = TRUE)
suppressMessages(library(DESeq2))
