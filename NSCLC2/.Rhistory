View(df_long)
View(long_metasample)
install.packages("lmtest")
library(lmtest)
# Plots - Only significant violin plot
significant_violin_plot = function(df_long, metadata_df, metadata_var, p_threshold = 0.05, normality_threshold = 0.05, main_title){
metadata_df = rownames_to_column(metadata_df, var = "Sample")
# Assuming only ONE numeric column
numeric_col <- names(df_long)[sapply(df_long, is.numeric)]
if (length(numeric_col) != 1) {
stop("There are more than one numeric column")
}
tmp_clinical = metadata_df[, c("Sample", metadata_var), drop = FALSE]
colnames(tmp_clinical) = c("Sample", "clin")
merged <- left_join(df_long, tmp_clinical, by = "Sample")
colnames(merged)[colnames(merged) == numeric_col] <- "Value"
clinc_groups = unique(merged[, "clin"])
normality_pvalues = list()
for (clinc_group in clinc_groups){
shapiro_test <- shapiro.test(merged[merged[[metadata_var]] == clinc_group, "Value"])
normality_pvalues = append(normality_pvalues, shapiro_test[["p.value"]])
}
if (all(unlist(normality_pvalues)) < normality_threshold){
# ANOVA TEST
test_result <- aov(Value ~ clin, data = merged)
summary_test_result <- summary(test_result)
p_value = summary_test_result[[1]]$'Pr(>F)'[1]
test_type = "ANOVA"
}
else{
# Kruskal-Wallis
test_result <- kruskal.test(Value ~ clin, data = merged)
p_value = test_result[["p.value"]]
test_type = "Kruskal-Wallis"
}
# ADD TEST FOR Homoscedasticity ??
if (!is.na(p_value) && p_value < p_threshold) {  # Check p-value
p <- ggplot(merged, aes(x = clin, y = Value, fill = clin)) +
geom_violin(trim = FALSE) +
geom_jitter(width = 0.2, alpha = 0.5, size = 1.5, color = "black") +
labs(title = paste(main_title, "Statistic test: ", test_type, "p value: ", round(p_value, digits = 2)), y = "IC Level", x = metadata_var, fill = metadata_var) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
else{
cat("No significant difference for: ", metadata_var, "p value:", p_value ,"\n")
}
}
# Specific significant violin plot
for (clin_var in clinical_vars) {
for (IC_value in ICs){
df = long_metasample %>%
dplyr::filter(IC == IC_value) %>%
dplyr::select(Sample, IC, Value)
significant_violin_plot(df_long = df, metadata_df = clinical, metadata_var = clin_var, p_threshold = 0.05, normality_threshold = 0.1, main_title = paste("Significant violin plot for", IC_value))
}
}
# Plots - Only significant violin plot
significant_violin_plot = function(df_long, metadata_df, metadata_var, p_threshold = 0.05, normality_threshold = 0.05, main_title){
metadata_df = rownames_to_column(metadata_df, var = "Sample")
# Assuming only ONE numeric column
numeric_col <- names(df_long)[sapply(df_long, is.numeric)]
if (length(numeric_col) != 1) {
stop("There are more than one numeric column")
}
tmp_clinical = metadata_df[, c("Sample", metadata_var), drop = FALSE]
colnames(tmp_clinical) = c("Sample", "clin")
merged <- left_join(df_long, tmp_clinical, by = "Sample")
colnames(merged)[colnames(merged) == numeric_col] <- "Value"
clinc_groups = unique(merged[, "clin"])
normality_pvalues = list()
for (clinc_group in clinc_groups){
shapiro_test <- shapiro.test(merged[metadata_var == clinc_group, "Value"])
normality_pvalues = append(normality_pvalues, shapiro_test[["p.value"]])
}
if (all(unlist(normality_pvalues)) < normality_threshold){
# ANOVA TEST
test_result <- aov(Value ~ clin, data = merged)
summary_test_result <- summary(test_result)
p_value = summary_test_result[[1]]$'Pr(>F)'[1]
test_type = "ANOVA"
}
else{
# Kruskal-Wallis
test_result <- kruskal.test(Value ~ clin, data = merged)
p_value = test_result[["p.value"]]
test_type = "Kruskal-Wallis"
}
# ADD TEST FOR Homoscedasticity ??
if (!is.na(p_value) && p_value < p_threshold) {  # Check p-value
p <- ggplot(merged, aes(x = clin, y = Value, fill = clin)) +
geom_violin(trim = FALSE) +
geom_jitter(width = 0.2, alpha = 0.5, size = 1.5, color = "black") +
labs(title = paste(main_title, "Statistic test: ", test_type, "p value: ", round(p_value, digits = 2)), y = "IC Level", x = metadata_var, fill = metadata_var) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
else{
cat("No significant difference for: ", metadata_var, "p value:", p_value ,"\n")
}
}
# Specific significant violin plot
for (clin_var in clinical_vars) {
for (IC_value in ICs){
df = long_metasample %>%
dplyr::filter(IC == IC_value) %>%
dplyr::select(Sample, IC, Value)
significant_violin_plot(df_long = df, metadata_df = clinical, metadata_var = clin_var, p_threshold = 0.05, normality_threshold = 0.1, main_title = paste("Significant violin plot for", IC_value))
}
}
# Plots - Only significant violin plot
significant_violin_plot = function(df_long, metadata_df, metadata_var, p_threshold = 0.05, normality_threshold = 0.05, main_title){
metadata_df = rownames_to_column(metadata_df, var = "Sample")
# Assuming only ONE numeric column
numeric_col <- names(df_long)[sapply(df_long, is.numeric)]
if (length(numeric_col) != 1) {
stop("There are more than one numeric column")
}
tmp_clinical = metadata_df[, c("Sample", metadata_var), drop = FALSE]
colnames(tmp_clinical) = c("Sample", "clin")
merged <- left_join(df_long, tmp_clinical, by = "Sample")
colnames(merged)[colnames(merged) == numeric_col] <- "Value"
clinc_groups = unique(merged[, "clin"])
normality_pvalues = list()
for (clinc_group in clinc_groups){
shapiro_test <- shapiro.test(merged[merged[[metadata_var]] == clinc_group, "Value"])
normality_pvalues = append(normality_pvalues, shapiro_test[["p.value"]])
}
if (all(unlist(normality_pvalues)) < normality_threshold){
# ANOVA TEST
test_result <- aov(Value ~ clin, data = merged)
summary_test_result <- summary(test_result)
p_value = summary_test_result[[1]]$'Pr(>F)'[1]
test_type = "ANOVA"
}
else{
# Kruskal-Wallis
test_result <- kruskal.test(Value ~ clin, data = merged)
p_value = test_result[["p.value"]]
test_type = "Kruskal-Wallis"
}
# ADD TEST FOR Homoscedasticity ??
if (!is.na(p_value) && p_value < p_threshold) {  # Check p-value
p <- ggplot(merged, aes(x = clin, y = Value, fill = clin)) +
geom_violin(trim = FALSE) +
geom_jitter(width = 0.2, alpha = 0.5, size = 1.5, color = "black") +
labs(title = paste(main_title, "Statistic test: ", test_type, "p value: ", round(p_value, digits = 2)), y = "IC Level", x = metadata_var, fill = metadata_var) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
else{
cat("No significant difference for: ", metadata_var, "p value:", p_value ,"\n")
}
}
# Specific significant violin plot
for (clin_var in clinical_vars) {
for (IC_value in ICs){
df = long_metasample %>%
dplyr::filter(IC == IC_value) %>%
dplyr::select(Sample, IC, Value)
significant_violin_plot(df_long = df, metadata_df = clinical, metadata_var = clin_var, p_threshold = 0.05, normality_threshold = 0.1, main_title = paste("Significant violin plot for", IC_value))
}
}
# Plots - Only significant violin plot
significant_violin_plot = function(df_long, metadata_df, metadata_var, p_threshold = 0.05, normality_threshold = 0.05, main_title){
metadata_df = rownames_to_column(metadata_df, var = "Sample")
# Assuming only ONE numeric column
numeric_col <- names(df_long)[sapply(df_long, is.numeric)]
if (length(numeric_col) != 1) {
stop("There are more than one numeric column")
}
tmp_clinical = metadata_df[, c("Sample", metadata_var), drop = FALSE]
colnames(tmp_clinical) = c("Sample", "clin")
merged <- left_join(df_long, tmp_clinical, by = "Sample")
colnames(merged)[colnames(merged) == numeric_col] <- "Value"
clinc_groups = unique(merged[, "clin"])
normality_pvalues = list()
for (clinc_group in clinc_groups){
shapiro_test <- shapiro.test(merged[merged[["clin"]] == clinc_group, "Value"])
normality_pvalues = append(normality_pvalues, shapiro_test[["p.value"]])
}
if (all(unlist(normality_pvalues)) < normality_threshold){
# ANOVA TEST
test_result <- aov(Value ~ clin, data = merged)
summary_test_result <- summary(test_result)
p_value = summary_test_result[[1]]$'Pr(>F)'[1]
test_type = "ANOVA"
}
else{
# Kruskal-Wallis
test_result <- kruskal.test(Value ~ clin, data = merged)
p_value = test_result[["p.value"]]
test_type = "Kruskal-Wallis"
}
# ADD TEST FOR Homoscedasticity ??
if (!is.na(p_value) && p_value < p_threshold) {  # Check p-value
p <- ggplot(merged, aes(x = clin, y = Value, fill = clin)) +
geom_violin(trim = FALSE) +
geom_jitter(width = 0.2, alpha = 0.5, size = 1.5, color = "black") +
labs(title = paste(main_title, "Statistic test: ", test_type, "p value: ", round(p_value, digits = 2)), y = "IC Level", x = metadata_var, fill = metadata_var) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
else{
cat("No significant difference for: ", metadata_var, "p value:", p_value ,"\n")
}
}
# Specific significant violin plot
for (clin_var in clinical_vars) {
for (IC_value in ICs){
df = long_metasample %>%
dplyr::filter(IC == IC_value) %>%
dplyr::select(Sample, IC, Value)
significant_violin_plot(df_long = df, metadata_df = clinical, metadata_var = clin_var, p_threshold = 0.05, normality_threshold = 0.1, main_title = paste("Significant violin plot for", IC_value))
}
}
df_long = df
metadata_df = clinical
metadata_var = clin_var
p_threshold = 0.05
normality_threshold = 0.1
metadata_df = rownames_to_column(metadata_df, var = "Sample")
# Assuming only ONE numeric column
numeric_col <- names(df_long)[sapply(df_long, is.numeric)]
if (length(numeric_col) != 1) {
stop("There are more than one numeric column")
}
View(metadata_df)
tmp_clinical = metadata_df[, c("Sample", metadata_var), drop = FALSE]
View(tmp_clinical)
colnames(tmp_clinical) = c("Sample", "clin")
merged <- left_join(df_long, tmp_clinical, by = "Sample")
View(merged)
colnames(merged)[colnames(merged) == numeric_col] <- "Value"
clinc_groups = unique(merged[, "clin"])
clinc_groups
unique(merged[, "clin"])
normality_pvalues = list()
for (clinc_group in clinc_groups){
shapiro_test <- shapiro.test(merged[merged[["clin"]] == clinc_group, "Value"])
normality_pvalues = append(normality_pvalues, shapiro_test[["p.value"]])
}
merged[merged[["clin"]] == clinc_group, "Value"]
shapiro.test(merged[merged[["clin"]] == clinc_group, "Value"])
data = merged["clin" == clinc_group, "Value"]
data = merged %>% filter(clin == clinc_group) %>% select(Value)
data = merged %>% filter(clin == clinc_group) %>% select(Value)
data = merged %>%
filter(clin == clinc_group) %>%
select(Value)
clinc_group = clinc_groups[1]
View(clinc_groups)
clinc_groups = unique(merged$clin)
clinc_group = clinc_groups[1]
data = merged %>%
filter(clin == clinc_group) %>%
select(Value)
data = merged %>%
dplyr::filter(clin == clinc_group) %>%
dplyr::select(Value)
shapiro_test <- shapiro.test(merged[merged[["clin"]] == clinc_group, "Value"])
View(data)
print(class(merged$Value))
# Plots - Only significant violin plot
significant_violin_plot = function(df_long, metadata_df, metadata_var, p_threshold = 0.05, normality_threshold = 0.05, main_title){
# df_long = df
# metadata_df = clinical
# metadata_var = clin_var
# p_threshold = 0.05
# normality_threshold = 0.1
metadata_df = rownames_to_column(metadata_df, var = "Sample")
# Assuming only ONE numeric column
numeric_col <- names(df_long)[sapply(df_long, is.numeric)]
if (length(numeric_col) != 1) {
stop("There are more than one numeric column")
}
tmp_clinical = metadata_df[, c("Sample", metadata_var), drop = FALSE]
colnames(tmp_clinical) = c("Sample", "clin")
merged <- left_join(df_long, tmp_clinical, by = "Sample")
colnames(merged)[colnames(merged) == numeric_col] <- "Value"
clinc_groups = unique(merged$clin)
normality_pvalues = list()
for (clinc_group in clinc_groups){
data = merged %>%
dplyr::filter(clin == clinc_group) %>%
dplyr::select(Value)
shapiro_test <- shapiro.test(data$Value)
normality_pvalues = append(normality_pvalues, shapiro_test[["p.value"]])
}
if (all(unlist(normality_pvalues)) < normality_threshold){
# ANOVA TEST
test_result <- aov(Value ~ clin, data = merged)
summary_test_result <- summary(test_result)
p_value = summary_test_result[[1]]$'Pr(>F)'[1]
test_type = "ANOVA"
}
else{
# Kruskal-Wallis
test_result <- kruskal.test(Value ~ clin, data = merged)
p_value = test_result[["p.value"]]
test_type = "Kruskal-Wallis"
}
# ADD TEST FOR Homoscedasticity ??
if (!is.na(p_value) && p_value < p_threshold) {  # Check p-value
p <- ggplot(merged, aes(x = clin, y = Value, fill = clin)) +
geom_violin(trim = FALSE) +
geom_jitter(width = 0.2, alpha = 0.5, size = 1.5, color = "black") +
labs(title = paste(main_title, "Statistic test: ", test_type, "p value: ", round(p_value, digits = 2)), y = "IC Level", x = metadata_var, fill = metadata_var) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
else{
cat("No significant difference for: ", metadata_var, "p value:", p_value ,"\n")
}
}
# Specific significant violin plot
for (clin_var in clinical_vars) {
for (IC_value in ICs){
df = long_metasample %>%
dplyr::filter(IC == IC_value) %>%
dplyr::select(Sample, IC, Value)
significant_violin_plot(df_long = df, metadata_df = clinical, metadata_var = clin_var, p_threshold = 0.05, normality_threshold = 0.1, main_title = paste("Significant violin plot for", IC_value))
}
}
# Plots - Only significant violin plot
significant_violin_plot = function(df_long, metadata_df, metadata_var, p_threshold = 0.05, normality_threshold = 0.05, main_title){
# df_long = df
# metadata_df = clinical
# metadata_var = clin_var
# p_threshold = 0.05
# normality_threshold = 0.1
metadata_df = rownames_to_column(metadata_df, var = "Sample")
# Assuming only ONE numeric column
numeric_col <- names(df_long)[sapply(df_long, is.numeric)]
if (length(numeric_col) != 1) {
stop("There are more than one numeric column")
}
tmp_clinical = metadata_df[, c("Sample", metadata_var), drop = FALSE]
colnames(tmp_clinical) = c("Sample", "clin")
merged <- left_join(df_long, tmp_clinical, by = "Sample")
colnames(merged)[colnames(merged) == numeric_col] <- "Value"
clinc_groups = unique(merged$clin)
normality_pvalues = list()
for (clinc_group in clinc_groups){
data = merged %>%
dplyr::filter(clin == clinc_group) %>%
dplyr::select(Value)
shapiro_test <- shapiro.test(data$Value)
normality_pvalues = append(normality_pvalues, shapiro_test[["p.value"]])
}
if (all(unlist(normality_pvalues)) < normality_threshold){
# ANOVA TEST
test_result <- aov(Value ~ clin, data = merged)
summary_test_result <- summary(test_result)
p_value = summary_test_result[[1]]$'Pr(>F)'[1]
test_type = "ANOVA"
}
else{
# Kruskal-Wallis
test_result <- kruskal.test(Value ~ clin, data = merged)
p_value = test_result[["p.value"]]
test_type = "Kruskal-Wallis"
}
# ADD TEST FOR Homoscedasticity ??
if (!is.na(p_value) && p_value < p_threshold) {  # Check p-value
p <- ggplot(merged, aes(x = clin, y = Value, fill = clin)) +
geom_violin(trim = FALSE) +
geom_jitter(width = 0.2, alpha = 0.5, size = 1.5, color = "black") +
labs(title = paste(main_title, "Statistic test: ", test_type, "p value: ", round(p_value, digits = 3)), y = "IC Level", x = metadata_var, fill = metadata_var) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p)
}
else{
cat("No significant difference for: ", metadata_var, "p value:", p_value ,"\n")
}
}
# Specific significant violin plot
for (clin_var in clinical_vars) {
for (IC_value in ICs){
df = long_metasample %>%
dplyr::filter(IC == IC_value) %>%
dplyr::select(Sample, IC, Value)
significant_violin_plot(df_long = df, metadata_df = clinical, metadata_var = clin_var, p_threshold = 0.05, normality_threshold = 0.1, main_title = paste("Significant violin plot for", IC_value))
}
}
View(gene_info)
# Load MetaSample and MetaGene from BIODICA analysis.
metasample_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_A.xls", header = TRUE, row.names = 1)
metagene_df <- read.table("/home/francesco.massaini/Projects/BIODICA/work/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ICA/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_ica_S.xls", header = TRUE, row.names = 1)
# Heatmap configuration
heatmap_colors <- colorRampPalette(c("navy", "white", "firebrick"))(100)
# Show results
metasample_df <- t(as.matrix(metasample_df))
identical(colnames(metasample_df), rownames(clinical))
pheatmap(metasample_df, main = "",
annotation_col = clinical,
color = heatmap_colors,
cluster_cols = TRUE,
show_colnames = T, show_rownames = T,
fontsize_col = 8, fontsize_row = 8, fontsize = 10, clustering_method = 'complete',
border = NA)
# Select most important ICs
chosen_IC = c("IC1", "IC2", "IC5", "IC6", "IC7")
metasample_df_selected <- metasample_df[chosen_IC, , drop = FALSE]
# Plot final SAMPLE heatmap
pheatmap(metasample_df_selected, main = "",
annotation_col = clinical,
color = heatmap_colors,
cluster_cols = TRUE,
cluster_rows = TRUE,
show_colnames = T, show_rownames = T,
fontsize_col = 8, fontsize_row = 8, fontsize = 10, clustering_method = 'complete',
border = NA)
# Prepare the data
# Convert 'metasample_df' into a long format
long_metasample <- as.data.frame(t(metasample_df)) %>%
tibble::rownames_to_column("Sample") %>%
pivot_longer(-Sample, names_to = "IC", values_to = "Value")
# Generate violin plots for each IC for each clinical variable
clinical_vars = colnames(clinical) # List of clinical variables
ICs = unique(long_metasample$IC)
# Aggregate violin plot for each clinical variable
for (clin_var in clinical_vars) {
Wrapped_violin_plot_by_clinical_feature(df_long = long_metasample, metadata_df = clinical, metadata_var = clin_var, facet_wrap_var = "IC")
}
# Specific significant violin plot
for (clin_var in clinical_vars) {
for (IC_value in ICs){
df = long_metasample %>%
dplyr::filter(IC == IC_value) %>%
dplyr::select(Sample, IC, Value)
significant_violin_plot(df_long = df, metadata_df = clinical, metadata_var = clin_var, p_threshold = 0.05, normality_threshold = 0.1, main_title = paste("Significant violin plot for", IC_value))
}
}
for (IC_value in ICs){
df = long_metasample %>%
dplyr::filter(IC == IC_value) %>%
dplyr::select(Sample, IC, Value)
significant_violin_plot(df_long = df, metadata_df = gender_adj_treat, metadata_var = "gender_treat", p_threshold = 0.05, main_title = paste("Significant violin plot for", IC_value))
}
# ADImpute to normalize to TPM
TPM_high_variance_genes <- counts_to_TPM(merged_counts_filtered_forClustering_gene_symbol, log = F) %>% # not yet log2 transformed
filter_low_variance_genes(., quantile_threshold = 0.75)
cat("Final nomber of genes: ", nrow(TPM_high_variance_genes))
compute_distribution(data = TPM_high_variance_genes, plot_title = "Distribution of high variance genes - TPM", xlab = "log2(TPM+1)", use_log = T) # log2(x+1)
# Finally convert TPM to log2(TPM+1)
TPM_high_variance_genes = log2(TPM_high_variance_genes+1)
# Adapt rownames of TPM to clinical ones
TPM_formatted_for_clinical_high_variance = TPM_high_variance_genes
colnames(TPM_formatted_for_clinical_high_variance) = gsub(pattern = "-FIXT.*",
replacement = "",
x = colnames(TPM_formatted_for_clinical_high_variance))
TPM_formatted_for_clinical_high_variance <- TPM_formatted_for_clinical_high_variance[, common_samples]
# check if patients are in the same order
identical(rownames(clinical), colnames(TPM_formatted_for_clinical))
distance_methods <- c("euclidean", "maximum", "manhattan", "minkowski", "pearson","spearman")
#"canberra", "binary",
clustering_methods <- c("ward.D2", "complete", "average")
# Heatmap on high variance TPM, groups and outliers
for (dist_method in distance_methods) {
for (clust_method in clustering_methods) {
# Output the method being used
cat("Using distance method:", dist_method, "and clustering method:", clust_method, "\n")
# Call the Compute_Heatmaps function with current methods
Compute_Heatmaps(expr_df = TPM_formatted_for_clinical_high_variance,
sample_metadata_df = clinical,
distance_method = dist_method,
clustering_method = clust_method,
basic_pheatmap = FALSE,
sample_vs_sample = TRUE)
}
}
# Save the file in the right format for BIODICA INDIPENDENT COMPONENT ANALYSIS (IDA)
TPM_forBIODICA = TPM_formatted_for_clinical_high_variance %>%
rownames_to_column(var = "genes")
#write.table(TPM_forBIODICA, "/home/francesco.massaini/Projects/BIODICA/data/TPM_NSCLC2_Biodica_meanDuplGenes_Adenocarcinoma_highly_variable_genes.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
# PCA biplot on TPM
Compute_PCA_biplot(expr_df = TPM_formatted_for_clinical_high_variance, sample_metadata_df = clinical, ellipse_area = 0.8)
# Add Adj treat and gender combination
Compute_PCA_biplot(expr_df = TPM_formatted_for_clinical_high_variance, sample_metadata_df = gender_adj_treat, ellipse_area = 0.8)
gender_adj_treat_high_variance = clinical %>%
mutate(gender_treat = paste("Gender", gender, "Adj_treat", adjuvant_treatment, sep = "_")) %>%
dplyr::select(gender_treat)
pca_result = Compute_PCA_biplot(TPM_formatted_for_clinical_high_variance, gender_adj_treat_high_variance, num_arrows = 10, ellipse_area = 0.8)
pca_cos2 =  as.data.frame(pca_result[["var"]][["cos2"]]) %>%
dplyr::select(Dim.1, Dim.2) %>%
dplyr::rename(cos2_Dim1 = Dim.1,
cos2_Dim2 = Dim.2)
df_long <- pca_cos2 %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value")
ggplot(df_long, aes(x = Value, fill = Variable)) +
geom_density(alpha = 0.5) +
facet_wrap(~ Variable, scales = "free") +
labs(title = "Kernel Density Function by feature",
x = "Value",
y = "Density") +
theme_minimal()
genes_high_variance = rownames(pca_cos2[pca_cos2$cos2_Dim1 >= 0.6,])
write.table(genes_high_variance, "./genes_test_high_variance.txt", sep="\n", row.names = FALSE, col.names = FALSE, quote = FALSE)
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
gene_info_high_variance <- getBM(attributes = c('hgnc_symbol', 'ensembl_gene_id', 'description'),
filters = 'hgnc_symbol',
values = genes_high_variance,
mart = ensembl)
gene_info_high_variance[,"description"] = str_remove_all(gene_info$description, pattern = "\\[Source:HGNC Symbol.*")
View(gene_info_high_variance)
