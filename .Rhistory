p = ggplot(data = x, aes(y = measure2, x = measure1, fill=r, label=round(r_if_sig,2))) +
geom_tile() +
labs(fill = paste0(corr_method, "'s\nCorrelation"), title = paste("Correlations", Deconv_method ,"Features vs", imaging_method),
subtitle = paste0("Only significant ", corr_method, "'s correlation coefficients shown.")) +
scale_fill_gradient2(mid="#FBFEF9",low="#0C6291",high="#A63446", limits=c(-1,1)) +
geom_text() +
theme_classic() +
scale_x_discrete(expand=c(0,0)) +
scale_y_discrete(expand=c(0,0)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1), axis.text.y = element_text(size = 10)) +
xlab(imaging_method) +
ylab(Deconv_method)
print(p)
dev.off()
}
}
# IF3
imaging_method = "IF3"
Deconv_method = "CellTFusion"
corr_method <- "spearman"
imaging = read.csv("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/01_IF_IMC/IF3_cell_type_fraction.csv", row.names = 1)
imaging = imaging[,-1]
rownames(imaging) <- str_remove_all(string = rownames(imaging), pattern = "-RNA-01|-RNA-02|-RNA-04|-FIXT-01|-IF3-01")
load("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/04_CellTFusion/Whitout_CD226_and_without_patient3/IF_CellTFusion_result/CellTFusion_Subgroups.RData")
common_patients <- intersect(rownames(imaging), rownames(dt[[1]]))
imaging_common <- imaging[common_patients,]
# Correlation by cell types
correlation <- function(data, corr) {
require(tidyr)
M <- Hmisc::rcorr(as.matrix(data), type = corr)
Mdf <- map(M, ~data.frame(.x))
corr_df = Mdf %>%
map(~rownames_to_column(.x, var="measure1")) %>%
map(~pivot_longer(.x, -measure1, names_to = "measure2")) %>%
bind_rows(.id = "id") %>%
pivot_wider(names_from = id, values_from = value) %>%
mutate(sig_p = ifelse(P < .05, T, F),
p_if_sig = ifelse(sig_p, P, NA),
r_if_sig = ifelse(sig_p, r, NA))
return(corr_df)
}
dt_cell_types = dt[["Deconvolution groups per cell types"]]
for (i in names(dt_cell_types)) {
imaging_common <- imaging[common_patients,]
#imaging_common <- imaging_common[, c(i,setdiff(names(imaging_common), i))]
if(ncol(dt_cell_types[[i, drop = FALSE]]) != 0){
df_corr_cell_type <- cbind(imaging_common, dt_cell_types[[i, drop = FALSE]])
x <- correlation(df_corr_cell_type, corr = corr_method)
x = filter(x, (measure1 %in% colnames(imaging_common) & measure2 %in% colnames(dt_cell_types[[i]]))) %>%# only taking ground vs deconv
arrange(desc(r))
pdf(paste0("../IMMUCAN_data/NSCLC2/04_CellTFusion/Whitout_CD226_and_without_patient3/Correlations/Splitting_celltype/IF3/", Deconv_method, "_", i ,"_vs_", imaging_method , "_", corr_method,".pdf"), width = 15)
p = ggplot(data = x, aes(y = measure2, x = measure1, fill=r, label=round(r_if_sig,2))) +
geom_tile() +
labs(fill = paste0(corr_method, "'s\nCorrelation"), title = paste("Correlations", Deconv_method ,"Features vs", imaging_method),
subtitle = paste0("Only significant ", corr_method, "'s correlation coefficients shown.")) +
scale_fill_gradient2(mid="#FBFEF9",low="#0C6291",high="#A63446", limits=c(-1,1)) +
geom_text() +
theme_classic() +
scale_x_discrete(expand=c(0,0)) +
scale_y_discrete(expand=c(0,0)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1), axis.text.y = element_text(size = 10)) +
xlab(imaging_method) +
ylab(Deconv_method)
print(p)
dev.off()
}
}
knitr::opts_chunk$set(fig.width=10, fig.height=10)
library(dplyr)
library(tibble)
library(tidyr)
library(org.Hs.eg.db) # Homo sapiens db
library(stringr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
library(ADImpute) # This package provides functions to compute TPM
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(survival)
library(ranger)
library(ggfortify)
library(rlang)
library(purrr)
library(rio)
clinical = read.csv("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
column_to_rownames(var = "immucan_id")
immunoscore = read.csv("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/ImmuneScores_NSCLC2_groups.csv", row.names = 1) %>%
filter(ImmuneScores_Classification %in% c("Hot", "Cold"))
rownames(immunoscore) <- rownames(immunoscore) %>%
str_replace_all(pattern = "\\.", replacement = "-") %>%
str_remove_all(pattern = "-FIXT-01|-RNA-01|-RNA-02")
immunoscore_common = filter_common_patients(immunoscore, clinical)[[1]]
source("/home/francesco.massaini/Desktop/IMMUCAN_Internship_code/Functions.R")
clinical = read.csv("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
column_to_rownames(var = "immucan_id")
immunoscore = read.csv("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/ImmuneScores_NSCLC2_groups.csv", row.names = 1) %>%
filter(ImmuneScores_Classification %in% c("Hot", "Cold"))
rownames(immunoscore) <- rownames(immunoscore) %>%
str_replace_all(pattern = "\\.", replacement = "-") %>%
str_remove_all(pattern = "-FIXT-01|-RNA-01|-RNA-02")
immunoscore_common = filter_common_patients(immunoscore, clinical)[[1]]
clinical_common = filter_common_patients(immunoscore, clinical)[[2]]
common_patients = filter_common_patients(immunoscore, clinical)[[3]]
print(paste("Number of immunoscore patients (only High or Cold)", length(common_patients)))
print(paste("Number of common patients", length(common_patients)))
View(clinical_common)
grep("time_to_event", colnames(clinical_common))
View(immunoscore_common)
cbind(clinical_common, immunoscore_common[,"ImmuneScores_Classification"])
merged_df = cbind(clinical_common, immunoscore_common[,"ImmuneScores_Classification"])
View(merged_df)
merged_df = cbind(clinical_common, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
km_trt_fit <- survfit(Surv(time_to_event, death) ~ immunoscore_common, data=clinical_common)
merged_df[,"death"]
merged_df[,"death"] = as.logical()
View(merged_df)
clinical = read.csv("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
column_to_rownames(var = "immucan_id")
immunoscore = read.csv("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/ImmuneScores_NSCLC2_groups.csv", row.names = 1) %>%
filter(ImmuneScores_Classification %in% c("Hot", "Cold"))
rownames(immunoscore) <- rownames(immunoscore) %>%
str_replace_all(pattern = "\\.", replacement = "-") %>%
str_remove_all(pattern = "-FIXT-01|-RNA-01|-RNA-02")
immunoscore_common = filter_common_patients(immunoscore, clinical)[[1]]
clinical_common = filter_common_patients(immunoscore, clinical)[[2]]
common_patients = filter_common_patients(immunoscore, clinical)[[3]]
print(paste("Number of immunoscore patients (only High or Cold)", length(common_patients)))
print(paste("Number of common patients", length(common_patients)))
View(merged_df)
View(clinical_common)
merged_df[,"death"] = as.logical(merged_df[,"death"] = "yes")
merged_df = cbind(clinical_common, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
merged_df[,"death"] = as.logical(merged_df[,"death"] = "yes")
merged_df = cbind(clinical_common, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
merged_df[,"death"] = as.logical(merged_df[,"death"] == "yes")
View(merged_df)
merged_df = cbind(clinical_common, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
merged_df[,"death"] = as.logical(merged_df[,"death"] == "Yes")
View(merged_df)
km_trt_fit <- survfit(Surv(time_to_event, death) ~ immunoscore_common, data=clinical_common)
km_trt_fit <- survfit(Surv(time_to_event, death) ~ immunoscore_common, data=merged_df)
km_trt_fit <- survfit(Surv(time_to_event, death) ~ immunoscore_common, data=merged_df)
km_trt_fit <- survfit(Surv(time_to_event, death) ~ ImmuneScores_Classification, data=merged_df)
autoplot(km_trt_fit)
crr(Surv(time_to_event, death) ~ ImmuneScores_Classification + age_at_registration, data = merged_df)
install.packages("tidycmprsk")
library(tidycmprsk)
crr(Surv(time_to_event, death) ~ ImmuneScores_Classification + age_at_registration, data = merged_df)
merged_df = cbind(clinical_common, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
merged_df[,"death"] = as.factor(merged_df[,"death"] == "Yes")
km_trt_fit <- survfit(Surv(time_to_event, death) ~ ImmuneScores_Classification, data=merged_df)
autoplot(km_trt_fit)
merged_df = cbind(clinical_common, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
View(merged_df)
merged_df[,"death"] = as.factor(merged_df[,"death"])
km_trt_fit <- survfit(Surv(time_to_event, death) ~ ImmuneScores_Classification, data=merged_df)
autoplot(km_trt_fit)
merged_df[,"death"] = as.factor(merged_df[,"death"])
crr(Surv(time_to_event, death) ~ ImmuneScores_Classification + age_at_registration, data = merged_df)
View(clinical_common[,clinical_numeric_columns])
clinical_numeric_columns = which(sapply(clinical_common, is.numeric))
not_useful_numeric_columns = which(colnames(clinical_common) %in% c("patient_id", "ibbl_kit_ids"))
clinical_numeric_columns = setdiff(clinical_numeric_columns, not_useful_numeric_columns)
head(clinical_common[,clinical_numeric_columns])
View(clinical_common[,clinical_numeric_columns])
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
color = TRUE
)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
clinical = read.csv("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
column_to_rownames(var = "immucan_id")
immunoscore = read.csv("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/ImmuneScores_NSCLC2_groups.csv", row.names = 1) %>%
filter(ImmuneScores_Classification %in% c("Hot", "Cold"))
rownames(immunoscore) <- rownames(immunoscore) %>%
str_replace_all(pattern = "\\.", replacement = "-") %>%
str_remove_all(pattern = "-FIXT-01|-RNA-01|-RNA-02")
immunoscore_common = filter_common_patients(immunoscore, clinical)[[1]]
clinical_common = filter_common_patients(immunoscore, clinical)[[2]]
common_patients = filter_common_patients(immunoscore, clinical)[[3]]
print(paste("Number of immunoscore patients (only High or Cold)", length(common_patients)))
print(paste("Number of common patients", length(common_patients)))
clinical_common = mutate(clinical_common, across(c("average_number_of_cigarettes", "number_of_years"), ~ ifelse(. == "U", NA, .)))
clinical_categorical_columns = which(sapply(clinical_common, is.character) | sapply(clinical_common, is.factor))
not_useful_categorical_columns = which(colnames(clinical_common) %in% c("disease", "date_of_diagnosis", "second_line", "driver_mutation", "type_of_neo_adj_trt", "curative_surgery"))
clinical_categorical_columns = setdiff(clinical_categorical_columns, not_useful_categorical_columns)
head(clinical_common[,clinical_categorical_columns])
clinical_numeric_columns = which(sapply(clinical_common, is.numeric))
not_useful_numeric_columns = which(colnames(clinical_common) %in% c("patient_id", "ibbl_kit_ids"))
clinical_numeric_columns = setdiff(clinical_numeric_columns, not_useful_numeric_columns)
head(clinical_common[,clinical_numeric_columns])
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
color = TRUE
)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
color = TRUE,
text(x = 0.5, y = 1.05, labels = paste("P-value:", format(p_value, digits = 2)), cex = 1.2)
)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
color = TRUE
)
text(x = 0.5, y = 1.05, labels = paste("P-value:", format(p_value, digits = 2)), cex = 1.2)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
sub = paste("P-value:", format(p_value, digits = 2)),
color = TRUE
)
text(x = 0.5, y = 1.05, labels = paste("P-value:", format(p_value, digits = 2)), cex = 1.2)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
sub = paste("P-value:", format(fisher_result$p.value, digits = 2)),
color = TRUE
)
text(x = 0.5, y = 1.05, labels = paste("P-value:", format(p_value, digits = 2)), cex = 1.2)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
sub = paste("P-value:", format(fisher_result$p.value, digits = 2)),
color = TRUE
)
text(x = 0.5, y = 1.05, labels = paste("P-value:", format(p_value, digits = 2)), cex = 1.2)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
sub = paste("P-value:", format(fisher_result$p.value, digits = 2)),
color = TRUE
)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
View(merged_df)
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value, contingency_table))
mosaicplot(contingency_table,
main = "Mosaic plot",
sub = paste("P-value:", format(fisher_result$p.value, digits = 2)),
color = TRUE
)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
print(contingency_table)
mosaicplot(contingency_table,
main = "Mosaic plot",
sub = paste("P-value:", format(fisher_result$p.value, digits = 2)),
color = TRUE
)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
print(contingency_table)
mosaicplot(contingency_table + 0.1,
main = "Mosaic plot",
sub = paste("P-value:", format(fisher_result$p.value, digits = 2)),
color = TRUE
)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
merged_df = cbind(clinical_common, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
merged_df[,"death"] = as.logical(merged_df[,"death"] == "Yes")
km_trt_fit <- survfit(Surv(time_to_event, death) ~ ImmuneScores_Classification, data=merged_df)
autoplot(km_trt_fit)
View(immunoscore)
knitr::opts_chunk$set(fig.width=10, fig.height=10)
library(dplyr)
library(tibble)
library(tibble)
library(tibble)
library(tidyr)
library(org.Hs.eg.db) # Homo sapiens db
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
library(ADImpute) # This package provides functions to compute TPM
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(survival)
library(survival)
library(ranger)
library(rlang)
library(purrr)
library(rio)
library(tidycmprsk)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(tibble)
library(tidyr)
library(org.Hs.eg.db) # Homo sapiens db
library(stringr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
library(ADImpute) # This package provides functions to compute TPM
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(survival)
library(ranger)
library(ggfortify)
library(rlang)
library(purrr)
library(rio)
library(tidycmprsk)
install.packages("DBI")
install.packages("Rcpp")
install.packages("vctrs")
install.packages("stringi")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
library(dplyr)
library(tibble)
library(tidyr)
library(org.Hs.eg.db) # Homo sapiens db
library(stringr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
library(org.Hs.eg.db) # Homo sapiens db
BiocManager::install("AnnotationDbi")
library(org.Hs.eg.db) # Homo sapiens db
install.packages("bit64")
library(org.Hs.eg.db) # Homo sapiens db
BiocManager::install("AnnotationDbi")
BiocManager::install("AnnotationDbi", force = TRUE)
install.packages("dplyr")
install.packages("tibble")
install.packages("tidyr")
install.packages("stringr")
install.packages("RColorBrewer")
install.packages("pheatmap")  # Note: depends on RColorBrewer
install.packages("ggplot2")
install.packages("ggfortify")  # Note: depends on ggplot2
install.packages("factoextra")  # Note: depends on ggplot2
install.packages("ranger")
install.packages("purrr")
install.packages("rio")  # Note: depends on stringi, which rio should handle automatically
install.packages("tidycmprsk")
install.packages("tibble")
install.packages("tidyr")
install.packages("tidyr")
install.packages("stringr")
install.packages("RColorBrewer")
install.packages("pheatmap")  # Note: depends on RColorBrewer
install.packages("ggplot2")
install.packages("ggfortify")  # Note: depends on ggplot2
install.packages("ggfortify")  # Note: depends on ggplot2
install.packages("factoextra")  # Note: depends on ggplot2
install.packages("ranger")
install.packages("purrr")
install.packages("rio")  # Note: depends on stringi, which rio should handle automatically
install.packages("tidycmprsk")
knitr::opts_chunk$set(fig.width=10, fig.height=10)
library(dplyr)
library(tibble)
library(tidyr)
library(org.Hs.eg.db) # Homo sapiens db
library(stringr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
library(ADImpute) # This package provides functions to compute TPM
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(survival)
library(ranger)
library(ggfortify)
library(rlang)
library(purrr)
library(rio)
