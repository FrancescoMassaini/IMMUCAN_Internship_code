}
# Data Loading
path <- "/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt"
data <- read.table(path, header = TRUE, sep = "\t", row.names = 1)
fixed_methods <- read.table("/home/francesco.massaini/Desktop/IMMUCAN_data/fixed_methods.txt", header = FALSE, sep = "\t")
variable_methods <- read.table("/home/francesco.massaini/Desktop/IMMUCAN_data/variable_methods.txt", header = FALSE, sep = "\t")
empty_pos <-  which(variable_methods[,1] == "", arr.ind = TRUE) # Clean empty pos
variable_methods_list <- variable_methods[-empty_pos,1]
# Keep only methods with variable signature
# Store signature
all_ms <- fixed_methods[,1] # Store in a list all the combinations of methods and signatures
for (i in variable_methods_list) {
# print(paste("i", i))
for (j in variable_methods[,2]){
# print(paste("j", j))
tmp <- paste(i,j, sep = "_")
# append(all_ms, tmp) doesn't work
all_ms <- c(all_ms, tmp)
# print(paste("tmp", tmp))
}
}
# More details https://r-graph-gallery.com/48-grouped-barplot-with-ggplot2
pdf("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/Methods_Results")
for (i in all_ms) {
print(i)
selected_method_data <- data[rownames(data), grep(i, colnames(data))]
plot_by_method(selected_method = i, result_file = selected_method_data)
}
dev.off()
# problem quando grep cerca BPRNACan trova anche BPRNACanPro(met) e BPRNACanProMet quindi nei risultati viene sommato tutto quanto perche si costruisce una tabella con anche le colonne di questi metodi con signature diverse. Provare con un if per escludere proprio i casi sbagliati (in BPRNACan)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
# library(org.Hs.eg.db) # Homo sapiens db
# columns(org.Hs.eg.db) # to look at the columns of this db
# Plots - Heatmap
TPM_Heatmap <- function(TPM){
TPM <- as.matrix(TPM)
# Utilizes the NormalizeTPM function from the ADImpute package.
# Performs normalization on the 'TPM' data frame, considering TPM (Transcripts Per Million) values.
# Setting 'log = T' indicates that the normalization will be done using the logarithm of TPM values.
# This is often employed to reduce variance and approximate a normal distribution.
# Add 1 at the log log(TPM+1) so that 0 values are propertly calculated
sampleDists <- dist(t(TPM)) #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,    main = "Sample clustering to detect outliers", sub="", xlab="",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Plots - Dendrogram
TPM_Sample_dendrogram <- function(TPM){
sampleTree = hclust(dist(t(TPM)), method = "average");
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Data Loading
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(files_names, "_")
# EDA
for (i in 1:length(path)) {
TPM <- read.table(path[i], header = TRUE,  sep = '	', row.names = 1)
pdf(paste0("../IMMUCAN_data/", folders_names[[i]][1], "/02_Plot_Outliers/", files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
TPM_Heatmap(TPM)
TPM_Sample_dendrogram(TPM)
dev.off()
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
# library(org.Hs.eg.db) # Homo sapiens db
# columns(org.Hs.eg.db) # to look at the columns of this db
# Plots - Heatmap
Compute_Samples_Heatmap <- function(TPM){
TPM <- as.matrix(TPM)
# Utilizes the NormalizeTPM function from the ADImpute package.
# Performs normalization on the 'TPM' data frame, considering TPM (Transcripts Per Million) values.
# Setting 'log = T' indicates that the normalization will be done using the logarithm of TPM values.
# This is often employed to reduce variance and approximate a normal distribution.
# Add 1 at the log log(TPM+1) so that 0 values are propertly calculated
sampleDists <- dist(t(TPM)) #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,    main = "Sample clustering to detect outliers", sub="", xlab="",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Plots - Dendrogram
Compute_Samples_dendrogram <- function(TPM){
sampleTree = hclust(dist(t(TPM)), method = "average");
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
TPM <- read.table(path[i], header = TRUE,  sep = '	', row.names = 1)
View(TPM)
TPM <- read.table(path[1], header = TRUE,  sep = '	', row.names = 1)
TPM
View(TPM)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
# library(org.Hs.eg.db) # Homo sapiens db
# columns(org.Hs.eg.db) # to look at the columns of this db
# Plots - Heatmap
Compute_Samples_Heatmap <- function(TPM){
TPM <- as.matrix(TPM)
# Utilizes the NormalizeTPM function from the ADImpute package.
# Performs normalization on the 'TPM' data frame, considering TPM (Transcripts Per Million) values.
# Setting 'log = T' indicates that the normalization will be done using the logarithm of TPM values.
# This is often employed to reduce variance and approximate a normal distribution.
# Add 1 at the log log(TPM+1) so that 0 values are propertly calculated
sampleDists <- dist(TPM) #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,    main = "Sample clustering to detect outliers", sub="", xlab="",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Plots - Dendrogram
Compute_Samples_dendrogram <- function(TPM){
sampleTree = hclust(dist(t(TPM)), method = "average");
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Data Loading
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(files_names, "_")
# EDA
for (i in 1:length(path)) {
TPM <- read.table(path[i], header = TRUE,  sep = '	', row.names = 1)
pdf(paste0("../IMMUCAN_data/", folders_names[[i]][1], "/02_Plot_Outliers/", files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
Compute_Samples_Heatmap(TPM)
Compute_Samples_dendrogram(TPM)
dev.off()
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
# library(org.Hs.eg.db) # Homo sapiens db
# columns(org.Hs.eg.db) # to look at the columns of this db
# Plots - Heatmap
Compute_Samples_Heatmap <- function(TPM){
TPM <- as.matrix(TPM)
# Utilizes the NormalizeTPM function from the ADImpute package.
# Performs normalization on the 'TPM' data frame, considering TPM (Transcripts Per Million) values.
# Setting 'log = T' indicates that the normalization will be done using the logarithm of TPM values.
# This is often employed to reduce variance and approximate a normal distribution.
# Add 1 at the log log(TPM+1) so that 0 values are propertly calculated
sampleDists <- dist(TPM) #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,    main = "Sample clustering to detect outliers", sub="", xlab="",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Plots - Dendrogram
Compute_Samples_dendrogram <- function(TPM){
sampleTree = hclust(dist(t(TPM)), method = "average");
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Data Loading
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(files_names, "_")
# EDA
for (i in 1:length(path)) {
TPM <- read.table(path[i], header = TRUE,  sep = '	', row.names = 1)
# pdf(paste0("../IMMUCAN_data/", folders_names[[i]][1], "/02_Plot_Outliers/", files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
Compute_Samples_Heatmap(TPM)
Compute_Samples_dendrogram(TPM)
# dev.off()
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
# library(org.Hs.eg.db) # Homo sapiens db
# columns(org.Hs.eg.db) # to look at the columns of this db
# Plots - Heatmap
Compute_Samples_Heatmap <- function(TPM){
TPM <- as.matrix(TPM)
# Utilizes the NormalizeTPM function from the ADImpute package.
# Performs normalization on the 'TPM' data frame, considering TPM (Transcripts Per Million) values.
# Setting 'log = T' indicates that the normalization will be done using the logarithm of TPM values.
# This is often employed to reduce variance and approximate a normal distribution.
# Add 1 at the log log(TPM+1) so that 0 values are propertly calculated
sampleDists <- dist(TPM) #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,    main = "Sample clustering to detect outliers", sub="", xlab="",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Plots - Dendrogram
Compute_Samples_dendrogram <- function(TPM){
sampleTree = hclust(dist(t(TPM)), method = "average");
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Data Loading
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(files_names, "_")
# EDA
for (i in 1:length(path)) {
TPM <- read.table(path[i], header = TRUE,  sep = '	', row.names = 1)
pdf(paste0("../IMMUCAN_data/", folders_names[[i]][1], "/02_Plot_Outliers/", files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
Compute_Samples_Heatmap(TPM)
Compute_Samples_dendrogram(TPM)
dev.off()
}
folders_names[[1]][1]
files_names
folders_names
strsplit(path, "IMMUCAN_data")[[1]]
strsplit(path, "IMMUCAN_data")[[2]]
strsplit(path, "IMMUCAN_data")
folders_names <- strsplit(path, "IMMUCAN_data")[[1]]
folders_names
folders_names[[1]]
folders_names <- strsplit(path, "IMMUCAN_data") %>%
folders_names[[2]]
folders_names <- folders_names[[2]] %>%
strsplit(path, "IMMUCAN_data")
folders_names
folders_names <- folders_names[[2]] %>%
strsplit(path, "IMMUCAN_data") %>%
strsplit(, files_names)
folders_names <- folders_names[[2]] %>%
strsplit(path, "IMMUCAN_data") %>%
strsplit(files_names)
folders_names <- folders_names[[2]] %>%
strsplit(path, "IMMUCAN_data") %>%
strsplit(folders_names,files_names)
strsplit(folders_names,files_names)
files_names <- gsub(".txt$", "", basename(path))
folders_names <- folders_names[[2]] %>%
strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[2]] %>%
strsplit(path, "IMMUCAN_data")
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- folders_names[[2]] %>%
strsplit(path, "IMMUCAN_data")
View(folders_names)
folders_names <-strsplit(path, "IMMUCAN_data") %>%
folders_names[[2]]
folders_names <-strsplit(path, "IMMUCAN_data") %>%
[[2]]
folders_names <-strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[2]]
folders_names
folders_names <- folders_names[[1]]
folders_names <- folders_names[[1]]
folders_names[1]
folders_names[2]
folders_names[1][1]
folders_names[1][2]
folders_names[2][1]
folders_names <- folders_names[[1]]
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(path, "IMMUCAN_data")
folders_names[[1]]
View(folders_names)
str(folders_names)
folders_names[[1]][2]
folders_names <- strsplit(path, "IMMUCAN_data") %>%
folders_names[[1]][2]
folders_names <- folders_names[[1]][2] %>%
strsplit(path, "IMMUCAN_data")
folders_names
folders_names <- folders_names[[1]][2] %>%
strsplit(path, "IMMUCAN_data") %>%
strsplit(., split = files_names)
folders_names <- folders_names[[1]][2] %>%
strsplit(path, "IMMUCAN_data") %>%
strsplit(split = files_names)
strsplit(folders_names, split = files_names)
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- folders_names[[1]][2] %>%
strsplit(path, "IMMUCAN_data")
folders_names
folders_names
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
files_names <- gsub(".txt$", "", basename(path))
folders_names <- folders_names[[1]][2] %>%
strsplit(path, "IMMUCAN_data") #%>%
folders_names
folders_names <- strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[1]][2]
folders_names
folders_names <- folders_names[[1]][2]  %>%
strsplit(folders_names, split = files_names)
folders_names
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[1]][2]
folders_names
strsplit(folders_names, split = files_names)
folders_names
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[1]][2]
folders_names <- strsplit(folders_names, split = files_names)
folders_names
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
# library(org.Hs.eg.db) # Homo sapiens db
# columns(org.Hs.eg.db) # to look at the columns of this db
# Plots - Heatmap
Compute_Samples_Heatmap <- function(TPM){
TPM <- as.matrix(TPM)
# Utilizes the NormalizeTPM function from the ADImpute package.
# Performs normalization on the 'TPM' data frame, considering TPM (Transcripts Per Million) values.
# Setting 'log = T' indicates that the normalization will be done using the logarithm of TPM values.
# This is often employed to reduce variance and approximate a normal distribution.
# Add 1 at the log log(TPM+1) so that 0 values are propertly calculated
sampleDists <- dist(TPM) #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,    main = "Sample clustering to detect outliers", sub="", xlab="",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Plots - Dendrogram
Compute_Samples_dendrogram <- function(TPM){
sampleTree = hclust(dist(t(TPM)), method = "average");
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Data Loading
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[1]][2]
folders_names <- strsplit(folders_names, split = files_names)
# EDA
for (i in 1:length(path)) {
TPM <- read.table(path[i], header = TRUE,  sep = '	', row.names = 1)
pdf(paste0("../IMMUCAN_data/", folders_names[[i]][1], "/02_Plot_Outliers/", files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
Compute_Samples_Heatmap(TPM)
Compute_Samples_dendrogram(TPM)
dev.off()
}
# Data Loading
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[1]][2]
folders_names <- strsplit(folders_names, split = files_names)
# EDA
for (i in 1:length(path)) {
TPM <- read.table(path[i], header = TRUE,  sep = '	', row.names = 1)
pdf(paste0("../IMMUCAN_data/", folders_names[[i]][1], "02_Plot_Outliers/", files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
Compute_Samples_Heatmap(TPM)
Compute_Samples_dendrogram(TPM)
dev.off()
}
# Data Loading
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[1]][2]
folders_names <- strsplit(folders_names, split = files_names)
# EDA
for (i in 1:length(path)) {
TPM <- read.table(path[i], header = TRUE,  sep = '	', row.names = 1)
pdf(paste0("../IMMUCAN_data", folders_names[[i]][1], "02_Plot_Outliers/", files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
Compute_Samples_Heatmap(TPM)
Compute_Samples_dendrogram(TPM)
dev.off()
}
# Data Loading
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[1]][2]
folders_names <- strsplit(folders_names, split = files_names)
# EDA
for (i in 1:length(path)) {
TPM <- read.table(path[i], header = TRUE,  sep = '	', row.names = 1)
pdf(paste0("../IMMUCAN_data", folders_names[[i]][1], files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
Compute_Samples_Heatmap(TPM)
Compute_Samples_dendrogram(TPM)
dev.off()
}
# library(org.Hs.eg.db) # Homo sapiens db
# columns(org.Hs.eg.db) # to look at the columns of this db
# Plots - Heatmap
Compute_Samples_Heatmap <- function(TPM){
TPM <- as.matrix(TPM)
# Utilizes the NormalizeTPM function from the ADImpute package.
# Performs normalization on the 'TPM' data frame, considering TPM (Transcripts Per Million) values.
# Setting 'log = T' indicates that the normalization will be done using the logarithm of TPM values.
# This is often employed to reduce variance and approximate a normal distribution.
# Add 1 at the log log(TPM+1) so that 0 values are propertly calculated
sampleDists <- dist(TPM) #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,    main = "Sample clustering", sub="", xlab="",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Plots - Dendrogram
Compute_Samples_dendrogram <- function(TPM){
sampleTree = hclust(dist(t(TPM)), method = "average");
plot(sampleTree, main = "Samples clustering", sub="", xlab="",
cex.lab = 1, cex.axis = 1.5, cex.main = 2)
}
# Data Loading
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[1]][2]
folders_names <- strsplit(folders_names, split = files_names)
# EDA
for (i in 1:length(path)) {
TPM <- read.table(path[i], header = TRUE,  sep = '	', row.names = 1)
pdf(paste0("../IMMUCAN_data", folders_names[[i]][1], files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
Compute_Samples_Heatmap(TPM)
Compute_Samples_dendrogram(TPM)
dev.off()
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
# library(org.Hs.eg.db) # Homo sapiens db
# columns(org.Hs.eg.db) # to look at the columns of this db
# Plots - Heatmap
Compute_Samples_Heatmap <- function(TPM){
TPM <- as.matrix(TPM)
# Utilizes the NormalizeTPM function from the ADImpute package.
# Performs normalization on the 'TPM' data frame, considering TPM (Transcripts Per Million) values.
# Setting 'log = T' indicates that the normalization will be done using the logarithm of TPM values.
# This is often employed to reduce variance and approximate a normal distribution.
# Add 1 at the log log(TPM+1) so that 0 values are propertly calculated
sampleDists <- dist(TPM) #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,    main = "Sample clustering", sub="", xlab="",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Plots - Dendrogram
Compute_Samples_dendrogram <- function(TPM){
sampleTree = hclust(dist(t(TPM)), method = "average");
plot(sampleTree, main = "Samples clustering", sub="", xlab="",
cex.lab = 0.5, cex.axis = 1.5, cex.main = 2)
}
# Data Loading
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[1]][2]
folders_names <- strsplit(folders_names, split = files_names)
# EDA
for (i in 1:length(path)) {
TPM <- read.table(path[i], header = TRUE,  sep = '	', row.names = 1)
pdf(paste0("../IMMUCAN_data", folders_names[[i]][1], files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
Compute_Samples_Heatmap(TPM)
Compute_Samples_dendrogram(TPM)
dev.off()
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
# library(org.Hs.eg.db) # Homo sapiens db
# columns(org.Hs.eg.db) # to look at the columns of this db
# Plots - Heatmap
Compute_Samples_Heatmap <- function(TPM){
TPM <- as.matrix(TPM)
# Utilizes the NormalizeTPM function from the ADImpute package.
# Performs normalization on the 'TPM' data frame, considering TPM (Transcripts Per Million) values.
# Setting 'log = T' indicates that the normalization will be done using the logarithm of TPM values.
# This is often employed to reduce variance and approximate a normal distribution.
# Add 1 at the log log(TPM+1) so that 0 values are propertly calculated
sampleDists <- dist(TPM) #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,    main = "Sample clustering", sub="", xlab="",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Plots - Dendrogram
Compute_Samples_dendrogram <- function(TPM){
sampleTree = hclust(dist(TPM), method = "average");
plot(sampleTree, main = "Samples clustering", sub="", xlab="",
cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
}
# Data Loading
path <- c("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/03_Deconvolution/all_deconvolutions_BC2_filtered_samples.txt")
files_names <- gsub(".txt$", "", basename(path))
folders_names <- strsplit(path, "IMMUCAN_data")
folders_names <- folders_names[[1]][2]
folders_names <- strsplit(folders_names, split = files_names)
# EDA
for (i in 1:length(path)) {
TPM <- read.table(path[i], header = TRUE,  sep = '	', row.names = 1)
pdf(paste0("../IMMUCAN_data", folders_names[[i]][1], files_names[i],"_outliers"), width = 16) # folders_names[[i]][1] double square bracket to access to the i vector, single bracket to access to the first value of the i vector
Compute_Samples_Heatmap(TPM)
Compute_Samples_dendrogram(TPM)
dev.off()
}
