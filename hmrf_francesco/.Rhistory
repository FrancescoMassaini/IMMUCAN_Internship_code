library(Giotto)
library(dplyr)
library(tibble)
library(readxl)
library(data.table)
phillips = as.data.table(read_xlsx('/home/francesco.massaini/Downloads/41467_2021_26974_MOESM3_ESM_-_Objects.xlsx'))
phillips = phillips[FileName == "reg056"]
# Code Block 2 - Set Paths
my_working_dir = '/home/francesco.massaini/Projects/mosna_benchmark/benchmarking/HMRF_francesco/phillips_output/'
# Code Block 3 - Set Giotto instructions
#  set Giotto instructions
instrs = createGiottoInstructions(save_plot = FALSE,
show_plot = TRUE,
save_dir = my_working_dir,
python_path = NULL)
# Subset Phillips ####
marker_col_names = c('FOXP3', 'GATA3', 'MUC-1', 'Vimentin', 'T-bet', 'CD62L', 'Cytokeratin', 'PD-L1', 'Ki-67', 'CD15', 'CD30', 'CD2', 'GranzymeB', 'CD5', 'CD39', 'MMP9', 'CD4', 'LAG3', 'CD25', 'CD56', 'CD20', 'PD-1', 'CD11c', 'CLA-CD162', 'IDO-1', 'VISTA', 'HLA-DR', 'ICOS', 'BCL-2', 'CD3', 'CD69', 'CD8', 'CD7', 'CD45RA', 'CD45', 'CD1a', 'CD57', 'B-catenin', 'CD45RO', 'CD71', 'CD34', 'CD68', 'CD38', 'CollagenIV', 'CD31', 'Podoplanin', 'CD138', 'CD163', 'Mastcell-tryptase', 'MMP12', 'CD164', 'p53', 'CCR6', 'CD16', 'CD11b', 'CCR4', 'EGFR', 'HOECHST1:Cyc_1_ch_1', 'DRAQ5')
coord_col_names = c('X', 'Y')
meta_names = c("Count",'ClusterName', "FileName", "Patients") # FileName = sample ClusterName = cell types
t_expr = as.data.frame(t(column_to_rownames(phillips[, c("Count", ..marker_col_names)], var = "Count")))
expr = as.data.table(rownames_to_column(t_expr, var = "markers"))
setnames(expr, names(expr), as.character(names(expr)))
coord = as.data.table(phillips[, c(..coord_col_names, "Count")])
colnames(coord) = c("sdimx", "sdimy", "Count")
coord[, Count := as.character(Count)]
meta = as.data.table(phillips[, ..meta_names])
meta[, Count := as.character(Count)]
# Code Block 4 - Create Giotto object
giotto = createGiottoObject(expression = expr,
spatial_locs = coord,
instructions = instrs)
giotto = addCellMetadata(gobject = giotto,
new_metadata = meta,
by_column = T,
column_cell_ID = "Count")
# visualize
cell_color_code = Giotto::getDistinctColors(length(unique(meta$ClusterName)))
spatPlot(gobject = giotto,
cell_color = "ClusterName",
color_as_factor = T,
cell_color_code = cell_color_code)
## delaunay network: stats + creation
plotStatDelaunayNetwork(gobject = giotto, maximum_distance = 400, save_plot = F)
giotto = createSpatialNetwork(gobject = giotto, minimum_k = 2, maximum_distance_delaunay = 400)
## create spatial networks based on k and/or distance from centroid
giotto <- createSpatialNetwork(gobject = giotto, method = 'kNN', k = 5, name = 'spatial_network')
# giotto <- createSpatialNetwork(gobject = giotto, method = 'kNN', k = 10, name = 'large_network')
# ## visualize different spatial networks on first field (~ layer 1)
# cell_metadata = pDataDT(giotto)
# field1_ids = cell_metadata[FOV == 0]$cell_ID
# subgiotto = subsetGiotto(giotto, cell_ids = field1_ids)
spatPlot(gobject = giotto, show_network = T,
network_color = 'blue', spatial_network_name = 'Delaunay_network',
point_size = 2.5, cell_color = 'ClusterName')
giotto = normalizeGiotto(gobject = giotto, scalefactor = 6000, verbose = T)
HMRF_init_obj <- initHMRF_V2(gobject = giotto, cl.method = "km",
expression_values = "custom",
# use_spatial_genes = my_spatial_genes,
spatial_network_name = 'Delaunay_network',
k = 9)
HMRF_init_obj <- initHMRF_V2(gobject = giotto, cl.method = "km",
expression_values = "scaled",
# use_spatial_genes = my_spatial_genes,
spatial_network_name = 'Delaunay_network',
k = 9)
giotto = normalizeGiotto(gobject = giotto, scalefactor = 6000, verbose = T)
HMRF_init_obj <- initHMRF_V2(gobject = giotto, cl.method = "km",
expression_values = "scaled",
# use_spatial_genes = my_spatial_genes,
spatial_network_name = 'Delaunay_network',
k = 9)
giotto = normalizeGiotto(gobject = giotto, scalefactor = 6000, verbose = T)
giotto = binSpect(giotto, return_gobject = TRUE)
HMRF_init_obj <- initHMRF_V2(gobject = giotto, cl.method = "km",
expression_values = "scaled",
# use_spatial_genes = my_spatial_genes,
spatial_network_name = 'Delaunay_network',
k = 9)
HMRF_spatial_genes = doHMRF_V2(HMRF_init_obj = HMRF_init_obj,
betas = c(28,2,3))
library(tibble)
library(dplyr)
library(ggplot2)
df = as.data.frame(HMRF_spatial_genes[[2]])
df = rownames_to_column(df, var = "cell_ID")
coord = giotto@spatial_locs[["cell"]][["raw"]]@coordinates
merge = left_join(df, coord)
# group_colors <- c(
#   "1" = "#E41A1C",  # Rosso
#   "2" = "#B3B3B3",  # Grigio
#   "3" = "#FF7F00",  # Arancione
#   "4" = "#CAB2D6",  # Lilla chiaro
#   "5" = "#377EB8",  # Blu
#   "6" = "#4DAF4A",  # Verde
#   "7" = "#984EA3",  # Lilla
#   "8" = "#FFFF33",  # Giallo
#   "9" = "#FF00FF"   # Fucsia
# )
ggplot(data = merge, aes(x = sdimx, y = sdimy, color =  as.character(class) )) +
geom_point() +
#scale_color_manual(values = group_colors) +
theme_minimal()
gc()
library(Giotto)
library(dplyr)
library(tibble)
library(readxl)
library(data.table)
phillips = as.data.table(read_xlsx('/home/francesco.massaini/Downloads/41467_2021_26974_MOESM3_ESM_-_Objects.xlsx'))
phillips = phillips[FileName == "reg056"]
# Code Block 2 - Set Paths
my_working_dir = '/home/francesco.massaini/Projects/mosna_benchmark/benchmarking/HMRF_francesco/phillips_output/'
# Code Block 3 - Set Giotto instructions
#  set Giotto instructions
instrs = createGiottoInstructions(save_plot = FALSE,
show_plot = TRUE,
save_dir = my_working_dir,
python_path = NULL)
# Subset Phillips ####
marker_col_names = c('FOXP3', 'GATA3', 'MUC-1', 'Vimentin', 'T-bet', 'CD62L', 'Cytokeratin', 'PD-L1', 'Ki-67', 'CD15', 'CD30', 'CD2', 'GranzymeB', 'CD5', 'CD39', 'MMP9', 'CD4', 'LAG3', 'CD25', 'CD56', 'CD20', 'PD-1', 'CD11c', 'CLA-CD162', 'IDO-1', 'VISTA', 'HLA-DR', 'ICOS', 'BCL-2', 'CD3', 'CD69', 'CD8', 'CD7', 'CD45RA', 'CD45', 'CD1a', 'CD57', 'B-catenin', 'CD45RO', 'CD71', 'CD34', 'CD68', 'CD38', 'CollagenIV', 'CD31', 'Podoplanin', 'CD138', 'CD163', 'Mastcell-tryptase', 'MMP12', 'CD164', 'p53', 'CCR6', 'CD16', 'CD11b', 'CCR4', 'EGFR', 'HOECHST1:Cyc_1_ch_1', 'DRAQ5')
coord_col_names = c('X', 'Y')
meta_names = c("Count",'ClusterName', "FileName", "Patients") # FileName = sample ClusterName = cell types
t_expr = as.data.frame(t(column_to_rownames(phillips[, c("Count", ..marker_col_names)], var = "Count")))
expr = as.data.table(rownames_to_column(t_expr, var = "markers"))
setnames(expr, names(expr), as.character(names(expr)))
coord = as.data.table(phillips[, c(..coord_col_names, "Count")])
colnames(coord) = c("sdimx", "sdimy", "Count")
coord[, Count := as.character(Count)]
meta = as.data.table(phillips[, ..meta_names])
meta[, Count := as.character(Count)]
# Code Block 4 - Create Giotto object
giotto = createGiottoObject(expression = expr,
spatial_locs = coord,
instructions = instrs)
giotto = addCellMetadata(gobject = giotto,
new_metadata = meta,
by_column = T,
column_cell_ID = "Count")
# visualize
cell_color_code = Giotto::getDistinctColors(length(unique(meta$ClusterName)))
spatPlot(gobject = giotto,
cell_color = "ClusterName",
color_as_factor = T,
cell_color_code = cell_color_code)
giotto <- createSpatialGrid(gobject = giotto,
sdimx_stepsize = 500,
sdimy_stepsize = 500,
minimum_padding = 50)
spatPlot(gobject = giotto, show_grid = T, point_size = 1.5)
## delaunay network: stats + creation
plotStatDelaunayNetwork(gobject = giotto, maximum_distance = 400, save_plot = F)
giotto = createSpatialNetwork(gobject = giotto, minimum_k = 2, maximum_distance_delaunay = 400)
## create spatial networks based on k and/or distance from centroid
giotto <- createSpatialNetwork(gobject = giotto, method = 'kNN', k = 5, name = 'spatial_network')
# giotto <- createSpatialNetwork(gobject = giotto, method = 'kNN', k = 10, name = 'large_network')
# ## visualize different spatial networks on first field (~ layer 1)
# cell_metadata = pDataDT(giotto)
# field1_ids = cell_metadata[FOV == 0]$cell_ID
# subgiotto = subsetGiotto(giotto, cell_ids = field1_ids)
spatPlot(gobject = giotto, show_network = T,
network_color = 'blue', spatial_network_name = 'Delaunay_network',
point_size = 2.5, cell_color = 'ClusterName')
giotto = normalizeGiotto(gobject = giotto, scalefactor = 6000, verbose = T)
giotto = binSpect(giotto, return_gobject = TRUE)
HMRF_init_obj <- initHMRF_V2(gobject = giotto, cl.method = "km",
expression_values = "scaled",
# use_spatial_genes = my_spatial_genes,
spatial_network_name = 'Delaunay_network',
k = 9)
library(Giotto)
library(dplyr)
library(tibble)
library(readxl)
library(data.table)
phillips = as.data.table(read_xlsx('/home/francesco.massaini/Downloads/41467_2021_26974_MOESM3_ESM_-_Objects.xlsx'))
phillips = phillips[FileName == "reg056"]
# Code Block 2 - Set Paths
my_working_dir = '/home/francesco.massaini/Projects/mosna_benchmark/benchmarking/HMRF_francesco/phillips_output/'
# Code Block 3 - Set Giotto instructions
#  set Giotto instructions
instrs = createGiottoInstructions(save_plot = FALSE,
show_plot = TRUE,
save_dir = my_working_dir,
python_path = NULL)
# Subset Phillips ####
marker_col_names = c('FOXP3', 'GATA3', 'MUC-1', 'Vimentin', 'T-bet', 'CD62L', 'Cytokeratin', 'PD-L1', 'Ki-67', 'CD15', 'CD30', 'CD2', 'GranzymeB', 'CD5', 'CD39', 'MMP9', 'CD4', 'LAG3', 'CD25', 'CD56', 'CD20', 'PD-1', 'CD11c', 'CLA-CD162', 'IDO-1', 'VISTA', 'HLA-DR', 'ICOS', 'BCL-2', 'CD3', 'CD69', 'CD8', 'CD7', 'CD45RA', 'CD45', 'CD1a', 'CD57', 'B-catenin', 'CD45RO', 'CD71', 'CD34', 'CD68', 'CD38', 'CollagenIV', 'CD31', 'Podoplanin', 'CD138', 'CD163', 'Mastcell-tryptase', 'MMP12', 'CD164', 'p53', 'CCR6', 'CD16', 'CD11b', 'CCR4', 'EGFR', 'HOECHST1:Cyc_1_ch_1', 'DRAQ5')
coord_col_names = c('X', 'Y')
meta_names = c("Count",'ClusterName', "FileName", "Patients") # FileName = sample ClusterName = cell types
t_expr = as.data.frame(t(column_to_rownames(phillips[, c("Count", ..marker_col_names)], var = "Count")))
expr = as.data.table(rownames_to_column(t_expr, var = "markers"))
setnames(expr, names(expr), as.character(names(expr)))
coord = as.data.table(phillips[, c(..coord_col_names, "Count")])
colnames(coord) = c("sdimx", "sdimy", "Count")
coord[, Count := as.character(Count)]
meta = as.data.table(phillips[, ..meta_names])
meta[, Count := as.character(Count)]
# Code Block 4 - Create Giotto object
giotto = createGiottoObject(expression = expr,
spatial_locs = coord,
instructions = instrs)
giotto = addCellMetadata(gobject = giotto,
new_metadata = meta,
by_column = T,
column_cell_ID = "Count")
# visualize
cell_color_code = Giotto::getDistinctColors(length(unique(meta$ClusterName)))
spatPlot(gobject = giotto,
cell_color = "ClusterName",
color_as_factor = T,
cell_color_code = cell_color_code)
giotto <- createSpatialGrid(gobject = giotto,
sdimx_stepsize = 500,
sdimy_stepsize = 500,
minimum_padding = 50)
spatPlot(gobject = giotto, show_grid = T, point_size = 1.5)
## delaunay network: stats + creation
plotStatDelaunayNetwork(gobject = giotto, maximum_distance = 400, save_plot = F)
giotto = createSpatialNetwork(gobject = giotto, minimum_k = 2, maximum_distance_delaunay = 400)
## create spatial networks based on k and/or distance from centroid
giotto <- createSpatialNetwork(gobject = giotto, method = 'kNN', k = 5, name = 'spatial_network')
# giotto <- createSpatialNetwork(gobject = giotto, method = 'kNN', k = 10, name = 'large_network')
# ## visualize different spatial networks on first field (~ layer 1)
# cell_metadata = pDataDT(giotto)
# field1_ids = cell_metadata[FOV == 0]$cell_ID
# subgiotto = subsetGiotto(giotto, cell_ids = field1_ids)
spatPlot(gobject = giotto, show_network = T,
network_color = 'blue', spatial_network_name = 'Delaunay_network',
point_size = 2.5, cell_color = 'ClusterName')
giotto = normalizeGiotto(gobject = giotto, scalefactor = 6000, verbose = T)
giotto = binSpect(giotto, return_gobject = TRUE)
HMRF_init_obj <- initHMRF_V2(gobject = giotto, cl.method = "km",
expression_values = "scaled",
# use_spatial_genes = my_spatial_genes,
spatial_network_name = 'Delaunay_network',
k = 9)
HMRF_spatial_genes = doHMRF_V2(HMRF_init_obj = HMRF_init_obj,
betas = c(28,2,3))
library(tibble)
library(dplyr)
library(ggplot2)
df = as.data.frame(HMRF_spatial_genes[[2]])
df = rownames_to_column(df, var = "cell_ID")
coord = giotto@spatial_locs[["cell"]][["raw"]]@coordinates
merge = left_join(df, coord)
# group_colors <- c(
#   "1" = "#E41A1C",  # Rosso
#   "2" = "#B3B3B3",  # Grigio
#   "3" = "#FF7F00",  # Arancione
#   "4" = "#CAB2D6",  # Lilla chiaro
#   "5" = "#377EB8",  # Blu
#   "6" = "#4DAF4A",  # Verde
#   "7" = "#984EA3",  # Lilla
#   "8" = "#FFFF33",  # Giallo
#   "9" = "#FF00FF"   # Fucsia
# )
ggplot(data = merge, aes(x = sdimx, y = sdimy, color =  as.character(class) )) +
geom_point() +
#scale_color_manual(values = group_colors) +
theme_minimal()
library(Giotto)
library(dplyr)
library(tibble)
library(readxl)
library(data.table)
View(giotto)
giotto@expression[["cell"]][["rna"]][["scaled"]]@exprMat@Dimnames[[2]]
View(coord)
ggplot(phillips, aes(x = X, y = Y, color = FileName)) +
geom_point() +
labs(title = "Scatterplot delle coordinate X e Y",
x = "Coordinate X",
y = "Coordinate Y",
color = "Filename") +
theme_minimal()
phillips = as.data.table(read_xlsx('/home/francesco.massaini/Downloads/41467_2021_26974_MOESM3_ESM_-_Objects.xlsx'))
phillips = as.data.table(read_xlsx('/home/francesco.massaini/Downloads/41467_2021_26974_MOESM3_ESM_-_Objects.xlsx'))
ggplot(phillips, aes(x = X, y = Y, color = FileName)) +
geom_point() +
labs(title = "Scatterplot delle coordinate X e Y",
x = "Coordinate X",
y = "Coordinate Y",
color = "Filename") +
theme_minimal()
min_max_df <- phillips[, .(
min_X = min(X),
max_X = max(X),
min_Y = min(Y),
max_Y = max(Y)
), by = Filename]
min_max_df <- phillips[, .(
min_X = min(X),
max_X = max(X),
min_Y = min(Y),
max_Y = max(Y)
), by = FileName]
View(min_max_df)
# create giotto object from provided paths ####
expr_path = "/home/francesco.massaini/Projects/mosna_benchmark/benchmarking/hmrf_francesco/cortex_svz_expression.txt"
#This dataset contains multiple field of views which need to be stitched together
# first merge location and additional metadata
expr = data.table::fread(expr_path)
View(expr)
loc_path = "/home/francesco.massaini/Projects/mosna_benchmark/benchmarking/hmrf_francesco/cortex_svz_centroids_coord.txt"
SS_locations = data.table::fread(loc_path)
View(SS_locations)
ggplot(SS_locations, aes(x = X, y = Y)) +
geom_point() +
labs(title = "Scatterplot delle coordinate X e Y",
x = "Coordinate X",
y = "Coordinate Y",
color = "Filename") +
theme_minimal()
getAnywhere(stitchFieldCoordinates)
