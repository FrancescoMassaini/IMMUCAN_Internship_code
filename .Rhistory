crr(Surv(time_to_event, death) ~ ImmuneScores_Classification + age_at_registration, data = merged_df)
View(clinical_common[,clinical_numeric_columns])
clinical_numeric_columns = which(sapply(clinical_common, is.numeric))
not_useful_numeric_columns = which(colnames(clinical_common) %in% c("patient_id", "ibbl_kit_ids"))
clinical_numeric_columns = setdiff(clinical_numeric_columns, not_useful_numeric_columns)
head(clinical_common[,clinical_numeric_columns])
View(clinical_common[,clinical_numeric_columns])
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
color = TRUE
)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
clinical = read.csv("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_for_R_update_2024.csv") %>%
column_to_rownames(var = "immucan_id")
immunoscore = read.csv("/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/ImmuneScores_NSCLC2_groups.csv", row.names = 1) %>%
filter(ImmuneScores_Classification %in% c("Hot", "Cold"))
rownames(immunoscore) <- rownames(immunoscore) %>%
str_replace_all(pattern = "\\.", replacement = "-") %>%
str_remove_all(pattern = "-FIXT-01|-RNA-01|-RNA-02")
immunoscore_common = filter_common_patients(immunoscore, clinical)[[1]]
clinical_common = filter_common_patients(immunoscore, clinical)[[2]]
common_patients = filter_common_patients(immunoscore, clinical)[[3]]
print(paste("Number of immunoscore patients (only High or Cold)", length(common_patients)))
print(paste("Number of common patients", length(common_patients)))
clinical_common = mutate(clinical_common, across(c("average_number_of_cigarettes", "number_of_years"), ~ ifelse(. == "U", NA, .)))
clinical_categorical_columns = which(sapply(clinical_common, is.character) | sapply(clinical_common, is.factor))
not_useful_categorical_columns = which(colnames(clinical_common) %in% c("disease", "date_of_diagnosis", "second_line", "driver_mutation", "type_of_neo_adj_trt", "curative_surgery"))
clinical_categorical_columns = setdiff(clinical_categorical_columns, not_useful_categorical_columns)
head(clinical_common[,clinical_categorical_columns])
clinical_numeric_columns = which(sapply(clinical_common, is.numeric))
not_useful_numeric_columns = which(colnames(clinical_common) %in% c("patient_id", "ibbl_kit_ids"))
clinical_numeric_columns = setdiff(clinical_numeric_columns, not_useful_numeric_columns)
head(clinical_common[,clinical_numeric_columns])
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
color = TRUE
)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
color = TRUE,
text(x = 0.5, y = 1.05, labels = paste("P-value:", format(p_value, digits = 2)), cex = 1.2)
)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
color = TRUE
)
text(x = 0.5, y = 1.05, labels = paste("P-value:", format(p_value, digits = 2)), cex = 1.2)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
sub = paste("P-value:", format(p_value, digits = 2)),
color = TRUE
)
text(x = 0.5, y = 1.05, labels = paste("P-value:", format(p_value, digits = 2)), cex = 1.2)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
sub = paste("P-value:", format(fisher_result$p.value, digits = 2)),
color = TRUE
)
text(x = 0.5, y = 1.05, labels = paste("P-value:", format(p_value, digits = 2)), cex = 1.2)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
sub = paste("P-value:", format(fisher_result$p.value, digits = 2)),
color = TRUE
)
text(x = 0.5, y = 1.05, labels = paste("P-value:", format(p_value, digits = 2)), cex = 1.2)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
mosaicplot(contingency_table,
main = "Mosaic plot",
sub = paste("P-value:", format(fisher_result$p.value, digits = 2)),
color = TRUE
)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
View(merged_df)
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value, contingency_table))
mosaicplot(contingency_table,
main = "Mosaic plot",
sub = paste("P-value:", format(fisher_result$p.value, digits = 2)),
color = TRUE
)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
print(contingency_table)
mosaicplot(contingency_table,
main = "Mosaic plot",
sub = paste("P-value:", format(fisher_result$p.value, digits = 2)),
color = TRUE
)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
for (i in 1:length(clinical_categorical_columns)){
column = clinical_common[,clinical_categorical_columns[i], drop = FALSE]
if (length(unique(na.omit(column[,1]))) >= 2) {
merged_df = cbind(column, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
contingency_table = table(merged_df)
fisher_result <- fisher.test(as.matrix(contingency_table))
if (fisher_result$p.value < 0.05) {
print(paste(colnames(column), fisher_result$p.value))
print(contingency_table)
mosaicplot(contingency_table + 0.1,
main = "Mosaic plot",
sub = paste("P-value:", format(fisher_result$p.value, digits = 2)),
color = TRUE
)
}
else {
print(paste(colnames(column), "No Significance"))
}
}
}
merged_df = cbind(clinical_common, "ImmuneScores_Classification" = immunoscore_common[,"ImmuneScores_Classification"])
merged_df[,"death"] = as.logical(merged_df[,"death"] == "Yes")
km_trt_fit <- survfit(Surv(time_to_event, death) ~ ImmuneScores_Classification, data=merged_df)
autoplot(km_trt_fit)
View(immunoscore)
knitr::opts_chunk$set(fig.width=10, fig.height=10)
library(dplyr)
library(tibble)
library(tibble)
library(tibble)
library(tidyr)
library(org.Hs.eg.db) # Homo sapiens db
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
library(ADImpute) # This package provides functions to compute TPM
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(survival)
library(survival)
library(ranger)
library(rlang)
library(purrr)
library(rio)
library(tidycmprsk)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(tibble)
library(tidyr)
library(org.Hs.eg.db) # Homo sapiens db
library(stringr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
library(ADImpute) # This package provides functions to compute TPM
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(survival)
library(ranger)
library(ggfortify)
library(rlang)
library(purrr)
library(rio)
library(tidycmprsk)
install.packages("DBI")
install.packages("Rcpp")
install.packages("vctrs")
install.packages("stringi")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
library(dplyr)
library(tibble)
library(tidyr)
library(org.Hs.eg.db) # Homo sapiens db
library(stringr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
library(org.Hs.eg.db) # Homo sapiens db
BiocManager::install("AnnotationDbi")
library(org.Hs.eg.db) # Homo sapiens db
install.packages("bit64")
library(org.Hs.eg.db) # Homo sapiens db
BiocManager::install("AnnotationDbi")
BiocManager::install("AnnotationDbi", force = TRUE)
install.packages("dplyr")
install.packages("tibble")
install.packages("tidyr")
install.packages("stringr")
install.packages("RColorBrewer")
install.packages("pheatmap")  # Note: depends on RColorBrewer
install.packages("ggplot2")
install.packages("ggfortify")  # Note: depends on ggplot2
install.packages("factoextra")  # Note: depends on ggplot2
install.packages("ranger")
install.packages("purrr")
install.packages("rio")  # Note: depends on stringi, which rio should handle automatically
install.packages("tidycmprsk")
install.packages("tibble")
install.packages("tidyr")
install.packages("tidyr")
install.packages("stringr")
install.packages("RColorBrewer")
install.packages("pheatmap")  # Note: depends on RColorBrewer
install.packages("ggplot2")
install.packages("ggfortify")  # Note: depends on ggplot2
install.packages("ggfortify")  # Note: depends on ggplot2
install.packages("factoextra")  # Note: depends on ggplot2
install.packages("ranger")
install.packages("purrr")
install.packages("rio")  # Note: depends on stringi, which rio should handle automatically
install.packages("tidycmprsk")
knitr::opts_chunk$set(fig.width=10, fig.height=10)
library(dplyr)
library(tibble)
library(tidyr)
library(org.Hs.eg.db) # Homo sapiens db
library(stringr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
library(ADImpute) # This package provides functions to compute TPM
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(survival)
library(ranger)
library(ggfortify)
library(rlang)
library(purrr)
library(rio)
knitr::opts_chunk$set(fig.width=10, fig.height=10)
library(dplyr)
library(tibble)
library(tidyr)
library(org.Hs.eg.db) # Homo sapiens db
library(stringr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
library(ADImpute) # This package provides functions to compute TPM
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(survival)
library(ranger)
library(ggfortify)
library(rlang)
library(purrr)
library(rio)
library(biomaRt)
source("/home/francesco.massaini/Desktop/IMMUCAN_Internship_code/Functions.R")
TPM = load("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/02_TPM/BC2_estimated_TPM.RData")
test1 = colSums(gexp_tpm)
TPM = remove_gene_version(gexp_tpm)
TPM = EnsemblID_to_GeneSymbol(TPM)
# Summary and check if these are really TPM
summary(TPM)
test2 = colSums(TPM)
View(gexp_tpm)
View(TPM)
View(gexp_tpm)
View(TPM)
colSums(gexp_tpm)
colSums(TPM) # NOTE, when you convert ENSEMBL IDs to GENE SYMBOLS we lose 20k genes cause there are duplicates names
TPM_long <- pivot_longer(TPM, cols = 1:ncol(TPM), names_to = "Samples", values_to = "TPM")
TPM_long <- pivot_longer(TPM, cols = 1:ncol(TPM), names_to = "Samples", values_to = "TPM")
View(TPM_long)
TPM_long <- pivot_longer(TPM, cols = everything(),
names_to = "Patient",
values_to = "TPM",
names_to = "Samples",
values_to = "TPM")
TPM_long <- pivot_longer(TPM, cols = everything(),
names_to = "Patient",
values_to = "TPM")
View(TPM_long)
View(TPM_long)
TPM_long <- pivot_longer(TPM, cols = everything(),
names_to = "Patient",
values_to = "TPM") %>%
mutate(Gene = rownames(df))
View(TPM_long)
View(TPM_long)
TPM_long <- pivot_longer(TPM, cols = everything(),
names_to = "Patient",
values_to = "TPM") %>%
mutate(Gene = rownames(TPM))
View(TPM_long)
knitr::opts_chunk$set(fig.width=10, fig.height=10)
library(dplyr)
library(tibble)
library(tidyr)
library(org.Hs.eg.db) # Homo sapiens db
library(stringr)
library(RColorBrewer) # for plot
library(pheatmap) # for heatmaps
library(ADImpute) # This package provides functions to compute TPM
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(survival)
library(ranger)
library(ggfortify)
library(rlang)
library(purrr)
library(rio)
library(biomaRt)
output_folder_TPM <- "/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/02_TPM/"
output_folder_deconvolution <- "/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/03_Deconvolution/Whitout_CD226_and_without_patient3/"
output_folder_CellTFusion <- "/home/francesco.massaini/Desktop/IMMUCAN_data/NSCLC2/04_CellTFusion/Whitout_CD226_and_without_patient3/"
TPM = load("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/02_TPM/BC2_estimated_TPM.RData")
colSums(gexp_tpm)
TPM = remove_gene_version(gexp_tpm)
source("/home/francesco.massaini/Desktop/IMMUCAN_Internship_code/Functions.R")
TPM = load("/home/francesco.massaini/Desktop/IMMUCAN_data/BC2/02_TPM/BC2_estimated_TPM.RData")
colSums(gexp_tpm)
TPM = remove_gene_version(gexp_tpm)
TPM = EnsemblID_to_GeneSymbol(TPM)
# Summary and check if these are really TPM
summary(TPM)
colSums(TPM) # NOTE, this doesn't sum up to 1 million because when you convert ENSEMBL IDs to GENE SYMBOLS we lose 20k genes cause there are duplicates names
TPM_long <- pivot_longer(TPM, cols = everything(),
names_to = "Patient",
values_to = "TPM") %>%
mutate(Gene = rownames(TPM))
View(TPM_long)
mutate(Gene = rownames(TPM))
TPM_long <- pivot_longer(TPM, cols = everything(),
names_to = "Patient",
values_to = "TPM",
rownames_to = "Gene")
TPM_long <- pivot_longer(TPM,
cols = -Gene,
names_to = "Patient",
values_to = "TPM")
TPM_with_genes <- TPM %>%
rownames_to_column(var = "Gene")
TPM_long <- pivot_longer(TPM,
cols = -Gene,
names_to = "Patient",
values_to = "TPM")
TPM_long <- pivot_longer(TPM_with_genes,
cols = -Gene,
names_to = "Patient",
values_to = "TPM")
ggplot2::ggplot(TPM_with_genes, aes(x = TPM))+
geom_density()+ theme_bw() +
#
#
# # Histogram
# ggplot(data = TPM_long, aes(x=TPM)) +
#   geom_histogram(binwidth = 0.05) +
#   geom_rug(color = "blue") +
#   scale_x_continuous(limits = c(0, max(TPM_long$TPM))) +
#   scale_y_continuous(limits = c(0, 100000))
# # scale_y_continuous(limits = c(-100, 800000))
#
# # Jitter plot
# ggplot(data = TPM_long, aes(x = TPM, y = 0)) +
#   geom_jitter(width = 0, height = 0.1, size = 1, alpha = 0.5) +
#   xlab("TPM") +
#   ylab("")
```
ggplot2::ggplot(TPM_long, aes(x = TPM))+
geom_density()+ theme_bw() +
#
#
# # Histogram
# ggplot(data = TPM_long, aes(x=TPM)) +
#   geom_histogram(binwidth = 0.05) +
#   geom_rug(color = "blue") +
#   scale_x_continuous(limits = c(0, max(TPM_long$TPM))) +
#   scale_y_continuous(limits = c(0, 100000))
# # scale_y_continuous(limits = c(-100, 800000))
#
# # Jitter plot
# ggplot(data = TPM_long, aes(x = TPM, y = 0)) +
#   geom_jitter(width = 0, height = 0.1, size = 1, alpha = 0.5) +
#   xlab("TPM") +
#   ylab("")
```
ggplot2::ggplot(TPM_long, aes(x = TPM))+
geom_density()+ theme_bw()
ggplot2::ggplot(TPM_long, aes(x = log1p(TPM)))+
geom_density()+ theme_bw()
ggplot2::ggplot(TPM_long, aes(x = log1p(TPM)))+
geom_density()+ theme_bw() +
labs(title = "log(TPM+1) Distribution",
x = "log(TPM + 1)",
y = "Density")
