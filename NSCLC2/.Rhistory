suppressMessages(library(purrr))
suppressMessages(library(rio))
suppressMessages(library(uwot))
suppressMessages(library(DESeq2))
source("../Functions.R")
# Expression data
raw_counts = read.delim("../../IMMUCAN_data/NSCLC2/01_Raw_Counts/NSCLC2_all_patients_counts_forDE.txt", sep = "\t", check.names = TRUE) # "-" it's automatically converted into "." with checknames = TRUE (default). With FALSE, the script crashes. Let's convert . into original - manually
colnames(raw_counts) = str_replace_all(colnames(raw_counts), pattern = "//.", replacement = "-")
# Clinical data
clinical = read.csv("../../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_Daniel_relevant_columns.csv", row.names = 1) # Load
suppressMessages(library(dplyr))
suppressMessages(library(tibble))
suppressMessages(library(tidyr))
suppressMessages(library(org.Hs.eg.db)) # Homo sapiens db
suppressMessages(library(stringr))
suppressMessages(library(RColorBrewer)) # for plot
suppressMessages(library(pheatmap)) # for heatmaps
suppressMessages(library(ADImpute)) # This package provides functions to compute TPM
suppressMessages(library(ggplot2))
suppressMessages(library(FactoMineR))
suppressMessages(library(factoextra))
suppressMessages(library(survival))
suppressMessages(library(ranger))
suppressMessages(library(ggfortify))
suppressMessages(library(rlang))
suppressMessages(library(purrr))
suppressMessages(library(rio))
suppressMessages(library(uwot))
suppressMessages(library(DESeq2))
source("../Functions.R")
# Expression data
raw_counts = read.delim("../../IMMUCAN_data/NSCLC2/01_Raw_Counts/NSCLC2_all_patients_counts_forDE.txt", sep = "\t", check.names = TRUE) # "-" it's automatically converted into "." with checknames = TRUE (default). With FALSE, the script crashes. Let's convert . into original - manually
colnames(raw_counts) = str_replace_all(colnames(raw_counts), pattern = "//.", replacement = "-")
# Clinical data
clinical = read.csv("../../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_Daniel_relevant_columns.csv", row.names = 1) # Load
colnames(raw_counts) = str_split_i(colnames(raw_counts), pattern = "-FIXT-.*", i = 1) # no issues with multiple samples for each patients because there is only one sample for each patients
clinical = clinical %>%
filter(rownames(.) %in% colnames(raw_counts)) # select only common patients
identical(rownames(clinical), colnames(raw_counts)) # identical checks also for the order
compute_distribution(data = raw_counts, plot_title = "Distribution of counts", xlab = "log2(Counts+1)", use_log = T) # log2(x+1)
filtered_raw_counts = filter_low_expr_genes(raw_counts, avg_expr_threshold = 12, zero_count_percent_threshold = 0.8)
compute_distribution(data = filtered_raw_counts, plot_title = "Distribution of counts", xlab = "log2(Counts+1)", use_log = T) # log2(x+1)
cat("Number of final genes:", nrow(filtered_raw_counts), "\nInitial number of genes:",  nrow(raw_counts), "\n Difference:", nrow(raw_counts)-nrow(filtered_raw_counts))
dds = DESeqDataSetFromMatrix(countData = filtered_raw_counts,
colData = clinical,
design = ~ death) # design specify the column of clinical data to use
View(raw_counts)
colnames(raw_counts) = str_replace_all(colnames(raw_counts), pattern = "//.", replacement = "-")
View(raw_counts)
colnames(raw_counts) = str_replace_all(colnames(raw_counts), pattern = "//.", replacement = "-")
colnames(raw_counts) = str_replace_all(colnames(raw_counts), pattern = "//.", replacement = "-")
colnames(raw_counts) = str_replace_all(colnames(raw_counts), pattern = "//.", replacement = "-")
colnames(raw_counts) = str_replace_all(colnames(raw_counts), pattern = "//.", replacement = "-")
View(raw_counts)
# Expression data
raw_counts = read.delim("../../IMMUCAN_data/NSCLC2/01_Raw_Counts/NSCLC2_all_patients_counts_forDE.txt", sep = "\t", check.names = TRUE) # "-" it's automatically converted into "." with checknames = TRUE (default). With FALSE, the script crashes. Let's convert . into original - manually
colnames(raw_counts) = str_replace_all(colnames(raw_counts), pattern = "\\.", replacement = "-")
# Clinical data
clinical = read.csv("../../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_Daniel_relevant_columns.csv", row.names = 1) # Load
suppressMessages(library(dplyr))
suppressMessages(library(tibble))
suppressMessages(library(tidyr))
suppressMessages(library(org.Hs.eg.db)) # Homo sapiens db
suppressMessages(library(stringr))
suppressMessages(library(RColorBrewer)) # for plot
suppressMessages(library(pheatmap)) # for heatmaps
suppressMessages(library(ADImpute)) # This package provides functions to compute TPM
suppressMessages(library(ggplot2))
suppressMessages(library(FactoMineR))
suppressMessages(library(factoextra))
suppressMessages(library(survival))
suppressMessages(library(ranger))
suppressMessages(library(ggfortify))
suppressMessages(library(rlang))
suppressMessages(library(purrr))
suppressMessages(library(rio))
suppressMessages(library(uwot))
suppressMessages(library(DESeq2))
source("../Functions.R")
# Expression data
raw_counts = read.delim("../../IMMUCAN_data/NSCLC2/01_Raw_Counts/NSCLC2_all_patients_counts_forDE.txt", sep = "\t", check.names = TRUE) # "-" it's automatically converted into "." with checknames = TRUE (default). With FALSE, the script crashes. Let's convert . into original - manually
colnames(raw_counts) = str_replace_all(colnames(raw_counts), pattern = "\\.", replacement = "-")
# Clinical data
clinical = read.csv("../../IMMUCAN_data/NSCLC2/01_Clinical_Data/Daniel/NSCLC2_Daniel_relevant_columns.csv", row.names = 1) # Load
colnames(raw_counts) = str_split_i(colnames(raw_counts), pattern = "-FIXT-.*", i = 1) # no issues with multiple samples for each patients because there is only one sample for each patients
clinical = clinical %>%
filter(rownames(.) %in% colnames(raw_counts)) # select only common patients
identical(rownames(clinical), colnames(raw_counts)) # identical checks also for the order
compute_distribution(data = raw_counts, plot_title = "Distribution of counts", xlab = "log2(Counts+1)", use_log = T) # log2(x+1)
filtered_raw_counts = filter_low_expr_genes(raw_counts, avg_expr_threshold = 12, zero_count_percent_threshold = 0.8)
compute_distribution(data = filtered_raw_counts, plot_title = "Distribution of counts", xlab = "log2(Counts+1)", use_log = T) # log2(x+1)
cat("Number of final genes:", nrow(filtered_raw_counts), "\nInitial number of genes:",  nrow(raw_counts), "\n Difference:", nrow(raw_counts)-nrow(filtered_raw_counts))
dds = DESeqDataSetFromMatrix(countData = filtered_raw_counts,
colData = clinical,
design = ~ death) # design specify the column of clinical data to use
dds
dds$death <- relevel(dds$death, ref = "Yes")
dds <- DESeq(dds) # run DESeq and saving back results on the same object
res <- results(dds) # saving DESeq results in res
res
# results columns
# baseMean : average of normalized counts
# log2FoldChange : FC of genes compared between conditions
# lfcSE : standard estimate of logFC
# stat : wall test values for each genes
# pvalue : pvalue
# padj : padj for multiple testing
resLFC <- lfcShrink(dds, coef="death_No_vs_Yes", type="ashr")
summary(res)
summary(resLFC)
cat("Number of adjusted p-values were less than 0.1: ", sum(res$padj < 0.1, na.rm=TRUE), "\n")
res0.01 <- results(dds, alpha = 0.01)
summary(res0.01)
DESeq2::plotMA(res, ylim=c(-2,2))
DESeq2::plotMA(resLFC, ylim=c(-2,2))
# Blu genes are significant differential expressed genes
## NOTE: none genes in the top right corners (highly expressed - high mean normalized count - and high fold change)
p_adj_threshold = 0.05
# Geni sovraespressi
overexpressed_genes <- res[res$log2FoldChange > 0.1 & res$padj < p_adj_threshold, ]
length(overexpressed_genes@rownames)
# Geni sottoespressi
underexpressed_genes <- res[res$log2FoldChange < -0.1 & res$padj < p_adj_threshold, ]
length(underexpressed_genes@rownames)
df_overexpressed = data.frame("genes" = overexpressed_genes@rownames,
"base_mean" = overexpressed_genes@listData[["baseMean"]],
"logFC" = overexpressed_genes@listData[["log2FoldChange"]],
"p_adj" = overexpressed_genes@listData[["padj"]])
logFC_order = order(df_overexpressed$logFC, decreasing = TRUE)
df_overexpressed = df_overexpressed[logFC_order,]
ov_genes =df_overexpressed[1:50,]
df_downexpressed = data.frame("genes" = underexpressed_genes@rownames,
"base_mean" = underexpressed_genes@listData[["baseMean"]],
"logFC" = underexpressed_genes@listData[["log2FoldChange"]],
"p_adj" = underexpressed_genes@listData[["padj"]])
logFC_order = order(df_downexpressed$logFC, decreasing = TRUE)
df_downexpressed = df_downexpressed[logFC_order,]
un_genes =df_downexpressed[1:30,]
ov_counts_df = filtered_raw_counts[ov_genes$genes,]
ov_counts_df = log2(ov_counts_df+1)
un_counts_df = filtered_raw_counts[un_genes$genes,]
un_counts_df = log2(un_counts_df+1)
DE_counts_df = rbind(ov_counts_df, un_counts_df)
Compute_Heatmaps(expr_df = DE_counts_df, sample_metadata_df = clinical)
pca_result <- FactoMineR::PCA(DE_counts_df, scale.unit = TRUE, graph = FALSE)
fviz_eig(pca_result) # Scree plot: explained variance by PC
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_PCA.pdf"))
for (feat in colnames(clinical)){
p = factoextra::fviz_pca_biplot(pca_result, repel = T, select.var = list(contrib = 5), label = "var",
habillage = as.factor(clinical[,feat]),
addEllipses = T, ellipse.level=0.95, palette = "Dark2",
legend.title = feat,
ggtheme = theme_minimal())
print(p)
}
pca_result <- FactoMineR::PCA(t(DE_counts_df), scale.unit = TRUE, graph = FALSE)
fviz_eig(pca_result) # Scree plot: explained variance by PC
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_PCA.pdf"))
for (feat in colnames(clinical)){
p = factoextra::fviz_pca_biplot(pca_result, repel = T, select.var = list(contrib = 5), label = "var",
habillage = as.factor(clinical[,feat]),
addEllipses = T, ellipse.level=0.95, palette = "Dark2",
legend.title = feat,
ggtheme = theme_minimal())
print(p)
}
p_adj_threshold = 0.05
# Geni sovraespressi
overexpressed_genes <- resLFC[resLFC$log2FoldChange > 0.1 & resLFC$padj < p_adj_threshold, ]
length(overexpressed_genes@rownames)
# Geni sottoespressi
underexpressed_genes <- resLFC[resLFC$log2FoldChange < -0.1 & resLFC$padj < p_adj_threshold, ]
length(underexpressed_genes@rownames)
p_adj_threshold = 0.05
# Geni sovraespressi
overexpressed_genes <- res[res$log2FoldChange > 0.1 & res$padj < p_adj_threshold, ]
length(overexpressed_genes@rownames)
# Geni sottoespressi
underexpressed_genes <- res[res$log2FoldChange < -0.1 & res$padj < p_adj_threshold, ]
length(underexpressed_genes@rownames)
p_adj_threshold = 0.05
# Geni sovraespressi
overexpressed_genes <- resLFC[resLFC$log2FoldChange > 0.1 & resLFC$padj < p_adj_threshold, ]
length(overexpressed_genes@rownames)
# Geni sottoespressi
underexpressed_genes <- resLFC[resLFC$log2FoldChange < -0.1 & resLFC$padj < p_adj_threshold, ]
length(underexpressed_genes@rownames)
FC_threshold = 0.5
p_adj_threshold = 0.05
# Geni sovraespressi
overexpressed_genes <- resLFC[resLFC$log2FoldChange > FC_threshold & resLFC$padj < p_adj_threshold, ]
length(overexpressed_genes@rownames)
# Geni sottoespressi
underexpressed_genes <- resLFC[resLFC$log2FoldChange < -FC_threshold & resLFC$padj < p_adj_threshold, ]
length(underexpressed_genes@rownames)
FC_threshold = 0.5
p_adj_threshold = 0.05
# Geni sovraespressi
overexpressed_genes <- res[res$log2FoldChange > FC_threshold & res$padj < p_adj_threshold, ]
length(overexpressed_genes@rownames)
# Geni sottoespressi
underexpressed_genes <- res[res$log2FoldChange < -FC_threshold & res$padj < p_adj_threshold, ]
length(underexpressed_genes@rownames)
FC_threshold = 1
p_adj_threshold = 0.05
# Geni sovraespressi
overexpressed_genes <- resLFC[resLFC$log2FoldChange > FC_threshold & resLFC$padj < p_adj_threshold, ]
length(overexpressed_genes@rownames)
# Geni sottoespressi
underexpressed_genes <- resLFC[resLFC$log2FoldChange < -FC_threshold & resLFC$padj < p_adj_threshold, ]
length(underexpressed_genes@rownames)
df_overexpressed = data.frame("genes" = overexpressed_genes@rownames,
"base_mean" = overexpressed_genes@listData[["baseMean"]],
"logFC" = overexpressed_genes@listData[["log2FoldChange"]],
"p_adj" = overexpressed_genes@listData[["padj"]])
logFC_order = order(df_overexpressed$logFC, decreasing = TRUE)
df_overexpressed = df_overexpressed[logFC_order,]
ov_genes =df_overexpressed[1:50,]
df_downexpressed = data.frame("genes" = underexpressed_genes@rownames,
"base_mean" = underexpressed_genes@listData[["baseMean"]],
"logFC" = underexpressed_genes@listData[["log2FoldChange"]],
"p_adj" = underexpressed_genes@listData[["padj"]])
logFC_order = order(df_downexpressed$logFC, decreasing = TRUE)
df_downexpressed = df_downexpressed[logFC_order,]
un_genes =df_downexpressed[1:30,]
ov_counts_df = filtered_raw_counts[ov_genes$genes,]
ov_counts_df = log2(ov_counts_df+1)
un_counts_df = filtered_raw_counts[un_genes$genes,]
un_counts_df = log2(un_counts_df+1)
DE_counts_df = rbind(ov_counts_df, un_counts_df)
Compute_Heatmaps(expr_df = DE_counts_df, sample_metadata_df = clinical)
Compute_Heatmaps(expr_df = DE_counts_df, sample_metadata_df = clinical)
View(DE_counts_df)
ov_counts_df = filtered_raw_counts[ov_genes$genes,]
ov_counts_df = log2(ov_counts_df+1)
un_counts_df = filtered_raw_counts[un_genes$genes,]
un_counts_df = log2(un_counts_df+1)
DE_counts_df = rbind(ov_counts_df, un_counts_df)
Compute_Heatmaps(expr_df = DE_counts_df, sample_metadata_df = clinical)
View(DE_counts_df)
ov_counts_df = filtered_raw_counts[ov_genes$genes,]
#ov_counts_df = log2(ov_counts_df+1)
un_counts_df = filtered_raw_counts[un_genes$genes,]
#un_counts_df = log2(un_counts_df+1)
DE_counts_df = rbind(ov_counts_df, un_counts_df)
View(DE_counts_df)
Compute_Heatmaps(expr_df = DE_counts_df, sample_metadata_df = clinical)
ov_counts_df = ov_counts_df+1
ov_counts_df = filtered_raw_counts[ov_genes$genes,]
ov_counts_df = ov_counts_df+1
#ov_counts_df = log2(ov_counts_df+1)
un_counts_df = filtered_raw_counts[un_genes$genes,]
un_counts_df = un_counts_df +1
#un_counts_df = log2(un_counts_df+1)
DE_counts_df = rbind(ov_counts_df, un_counts_df)
View(DE_counts_df)
Compute_Heatmaps(expr_df = DE_counts_df, sample_metadata_df = clinical)
expr_df = DE_counts_df
sampleDists <- dist(t(expr_df), method = 'euclidean') #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
# Compute sample vs sample Heatmap
pheatmap(sampleDistMatrix, main = "Sample vs samples heatmap",
annotation_col = sample_metadata_df,
color = hcl.colors(50, "BluYl"),
show_colnames = T, show_rownames = T,
fontsize_col = 5, fontsize_row = 5, fontsize = 10,
#clustering_distance_rows=sampleDists, # Use the previously computed distance to show the clustering
#clustering_distance_cols=sampleDists,
legend_breaks = c(min(sampleDistMatrix), max(sampleDistMatrix)),
legend_labels = c("Similar", "Distant"),
border = NA)
sample_metadata_df = clinical
sampleDists <- dist(t(expr_df), method = 'euclidean') #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
# Compute sample vs sample Heatmap
pheatmap(sampleDistMatrix, main = "Sample vs samples heatmap",
annotation_col = sample_metadata_df,
color = hcl.colors(50, "BluYl"),
show_colnames = T, show_rownames = T,
fontsize_col = 5, fontsize_row = 5, fontsize = 10,
#clustering_distance_rows=sampleDists, # Use the previously computed distance to show the clustering
#clustering_distance_cols=sampleDists,
legend_breaks = c(min(sampleDistMatrix), max(sampleDistMatrix)),
legend_labels = c("Similar", "Distant"),
border = NA)
# Plots - Heatmap
# expr_df with patients as columns. clinical data with patients as rows. Return a final merged df with patient as columns
Compute_Heatmaps <- function(expr_df, sample_metadata_df = NULL){
# expr_df = DE_counts_df
# sample_metadata_df = clinical
# Ensure same patients order
if (identical(colnames(expr_df), rownames(sample_metadata_df))){
# Compute Heatmap on expr values
pheatmap(as.matrix(expr_df), main = "heatmap",
annotation_col = sample_metadata_df,
color = hcl.colors(50, "BluYl"),
show_colnames = T, show_rownames = T,
fontsize_col = 5, fontsize_row = 5, fontsize = 10)
sampleDists <- dist(t(expr_df), method = 'euclidean') #Compute distance of the matrix. DO NOT DO IT FOR GENES. dist take into account rows! So to look at the patients you need to transpose. Distance is computed with eucledian metric. Remember you need to transpose (t) the matrix because dist takes rows (and samples are into columns)
sampleDistMatrix <- as.matrix(sampleDists)
# Compute sample vs sample Heatmap
pheatmap(sampleDistMatrix, main = "Sample vs samples heatmap",
annotation_col = sample_metadata_df,
color = hcl.colors(50, "BluYl"),
show_colnames = T, show_rownames = T,
fontsize_col = 5, fontsize_row = 5, fontsize = 10,
#clustering_distance_rows=sampleDists, # Use the previously computed distance to show the clustering
#clustering_distance_cols=sampleDists,
legend_breaks = c(min(sampleDistMatrix), max(sampleDistMatrix)),
legend_labels = c("Similar", "Distant"),
border = NA)
}
else{
cat("patient are not in the same order")
}
}
Compute_Heatmaps(expr_df = DE_counts_df, sample_metadata_df = clinical)
expr_df = DE_counts_df
sample_metadata_df = clinical
pheatmap(as.matrix(expr_df), main = "heatmap",
annotation_col = sample_metadata_df,
color = hcl.colors(50, "BluYl"),
show_colnames = T, show_rownames = T,
fontsize_col = 5, fontsize_row = 5, fontsize = 10)
pheatmap(as.matrix(expr_df), main = "heatmap",
annotation_col = sample_metadata_df,
color = hcl.colors(50, "BluYl"),
show_colnames = T, show_rownames = T,
fontsize_col = 5, fontsize_row = 5, fontsize = 10)
# PCA biplot on TPM
pca_result <- FactoMineR::PCA(t(DE_counts_df), scale.unit = TRUE, graph = FALSE)
View(DE_counts_df)
FC_threshold = 1
p_adj_threshold = 0.05
# Geni sovraespressi
overexpressed_genes <- resLFC[resLFC$log2FoldChange > FC_threshold & resLFC$padj < p_adj_threshold, ]
length(overexpressed_genes@rownames)
# Geni sottoespressi
underexpressed_genes <- resLFC[resLFC$log2FoldChange < -FC_threshold & resLFC$padj < p_adj_threshold, ]
length(underexpressed_genes@rownames)
View(overexpressed_genes)
df_overexpressed = data.frame("genes" = overexpressed_genes@rownames,
"base_mean" = overexpressed_genes@listData[["baseMean"]],
"logFC" = overexpressed_genes@listData[["log2FoldChange"]],
"p_adj" = overexpressed_genes@listData[["padj"]])
logFC_order = order(df_overexpressed$logFC, decreasing = TRUE)
df_overexpressed = df_overexpressed[logFC_order,]
View(df_overexpressed)
df_overexpressed = data.frame("genes" = overexpressed_genes@rownames,
"base_mean" = overexpressed_genes@listData[["baseMean"]],
"logFC" = overexpressed_genes@listData[["log2FoldChange"]],
"p_adj" = overexpressed_genes@listData[["padj"]])
logFC_order = order(df_overexpressed$logFC, decreasing = TRUE)
df_overexpressed = df_overexpressed[logFC_order,]
df_downexpressed = data.frame("genes" = underexpressed_genes@rownames,
"base_mean" = underexpressed_genes@listData[["baseMean"]],
"logFC" = underexpressed_genes@listData[["log2FoldChange"]],
"p_adj" = underexpressed_genes@listData[["padj"]])
logFC_order = order(df_downexpressed$logFC, decreasing = TRUE)
df_downexpressed = df_downexpressed[logFC_order,]
ov_counts_df = filtered_raw_counts[ov_genes$genes,]
ov_counts_df = ov_counts_df+1
#ov_counts_df = log2(ov_counts_df+1)
un_counts_df = filtered_raw_counts[un_genes$genes,]
un_counts_df = un_counts_df +1
#un_counts_df = log2(un_counts_df+1)
DE_counts_df = rbind(ov_counts_df, un_counts_df)
Compute_Heatmaps(expr_df = DE_counts_df, sample_metadata_df = clinical)
FC_threshold = 1
p_adj_threshold = 0.05
# Geni sovraespressi
overexpressed_genes <- resLFC[resLFC$log2FoldChange > FC_threshold & resLFC$padj < p_adj_threshold, ]
length(overexpressed_genes@rownames)
# Geni sottoespressi
underexpressed_genes <- resLFC[resLFC$log2FoldChange < -FC_threshold & resLFC$padj < p_adj_threshold, ]
length(underexpressed_genes@rownames)
df_overexpressed = data.frame("genes" = overexpressed_genes@rownames,
"base_mean" = overexpressed_genes@listData[["baseMean"]],
"logFC" = overexpressed_genes@listData[["log2FoldChange"]],
"p_adj" = overexpressed_genes@listData[["padj"]])
logFC_order = order(df_overexpressed$logFC, decreasing = TRUE)
df_overexpressed = df_overexpressed[logFC_order,]
df_downexpressed = data.frame("genes" = underexpressed_genes@rownames,
"base_mean" = underexpressed_genes@listData[["baseMean"]],
"logFC" = underexpressed_genes@listData[["log2FoldChange"]],
"p_adj" = underexpressed_genes@listData[["padj"]])
logFC_order = order(df_downexpressed$logFC, decreasing = TRUE)
df_downexpressed = df_downexpressed[logFC_order,]
View(df_downexpressed)
ov_counts_df = filtered_raw_counts[ov_genes$genes,]
ov_counts_df = ov_counts_df+1
#ov_counts_df = log2(ov_counts_df+1)
un_counts_df = filtered_raw_counts[un_genes$genes,]
un_counts_df = un_counts_df +1
#un_counts_df = log2(un_counts_df+1)
DE_counts_df = rbind(ov_counts_df, un_counts_df)
View(DE_counts_df)
ov_counts_df = filtered_raw_counts[ov_genes$genes,]
#ov_counts_df = log2(ov_counts_df+1)
un_counts_df = filtered_raw_counts[un_genes$genes,]
#un_counts_df = log2(un_counts_df+1)
DE_counts_df = rbind(ov_counts_df, un_counts_df)
View(DE_counts_df)
ov_counts_df = filtered_raw_counts[df_overexpressed$genes,]
ov_counts_df = ov_counts_df+1
#ov_counts_df = log2(ov_counts_df+1)
un_counts_df = filtered_raw_counts[df_downexpressed$genes,]
un_counts_df = un_counts_df +1
#un_counts_df = log2(un_counts_df+1)
DE_counts_df = rbind(ov_counts_df, un_counts_df)
View(DE_counts_df)
ov_counts_df = filtered_raw_counts[df_overexpressed$genes,]
#ov_counts_df = log2(ov_counts_df+1)
un_counts_df = filtered_raw_counts[df_downexpressed$genes,]
#un_counts_df = log2(un_counts_df+1)
DE_counts_df = rbind(ov_counts_df, un_counts_df)
Compute_Heatmaps(expr_df = DE_counts_df, sample_metadata_df = clinical)
Compute_Heatmaps(expr_df = DE_counts_df, sample_metadata_df = clinical)
ov_counts_df = filtered_raw_counts[df_overexpressed$genes,]
ov_counts_df = log2(ov_counts_df+1)
un_counts_df = filtered_raw_counts[df_downexpressed$genes,]
un_counts_df = log2(un_counts_df+1)
DE_counts_df = rbind(ov_counts_df, un_counts_df)
Compute_Heatmaps(expr_df = DE_counts_df, sample_metadata_df = clinical)
Compute_Heatmaps(expr_df = DE_counts_df, sample_metadata_df = clinical)
# PCA biplot on TPM
pca_result <- FactoMineR::PCA(t(DE_counts_df), scale.unit = TRUE, graph = FALSE)
fviz_eig(pca_result) # Scree plot: explained variance by PC
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_PCA.pdf"))
for (feat in colnames(clinical)){
p = factoextra::fviz_pca_biplot(pca_result, repel = T, select.var = list(contrib = 5), label = "var",
habillage = as.factor(clinical[,feat]),
addEllipses = T, ellipse.level=0.95, palette = "Dark2",
legend.title = feat,
ggtheme = theme_minimal())
print(p)
}
# repel = T do not overlap the text, select.var = list(contrib = 5) shows only the most 5 variable feature (variables) that contributes to separation. label = var , put label ONLY on the 5 variables
# dev.off()
# PCA biplot on TPM
pca_result <- FactoMineR::PCA(t(DE_counts_df), scale.unit = TRUE, graph = FALSE)
fviz_eig(pca_result) # Scree plot: explained variance by PC
# pdf(paste0(output_folder_TPM_outlier, "TPM_samples_PCA.pdf"))
for (feat in colnames(clinical)){
p = factoextra::fviz_pca_biplot(pca_result, repel = T, select.var = list(contrib = 5), label = "var",
habillage = as.factor(clinical[,feat]),
addEllipses = T, ellipse.level=0.95, palette = "Dark2",
legend.title = feat,
ggtheme = theme_minimal())
print(p)
}
# repel = T do not overlap the text, select.var = list(contrib = 5) shows only the most 5 variable feature (variables) that contributes to separation. label = var , put label ONLY on the 5 variables
# dev.off()
Compute_Heatmaps(expr_df = DE_counts_df, sample_metadata_df = clinical)
dds = DESeqDataSetFromMatrix(countData = filtered_raw_counts,
colData = clinical,
design = ~ death + adjuvant_treatment) # design specify the column of clinical data to use
resLFC <- lfcShrink(dds, coef="death_No_vs_Yes", type="ashr")
dds = DESeqDataSetFromMatrix(countData = filtered_raw_counts,
colData = clinical,
design = ~ death + adjuvant_treatment) # design specify the column of clinical data to use
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
resLFC <- lfcShrink(dds, coef="Intercept", type="ashr")
FC_threshold = 1
p_adj_threshold = 0.05
# Geni sovraespressi
overexpressed_genes <- resLFC[resLFC$log2FoldChange > FC_threshold & resLFC$padj < p_adj_threshold, ]
length(overexpressed_genes@rownames)
# Geni sottoespressi
underexpressed_genes <- resLFC[resLFC$log2FoldChange < -FC_threshold & resLFC$padj < p_adj_threshold, ]
length(underexpressed_genes@rownames)
df_overexpressed = data.frame("genes" = overexpressed_genes@rownames,
"base_mean" = overexpressed_genes@listData[["baseMean"]],
"logFC" = overexpressed_genes@listData[["log2FoldChange"]],
"p_adj" = overexpressed_genes@listData[["padj"]])
logFC_order = order(df_overexpressed$logFC, decreasing = TRUE)
df_overexpressed = df_overexpressed[logFC_order,]
df_downexpressed = data.frame("genes" = underexpressed_genes@rownames,
"base_mean" = underexpressed_genes@listData[["baseMean"]],
"logFC" = underexpressed_genes@listData[["log2FoldChange"]],
"p_adj" = underexpressed_genes@listData[["padj"]])
logFC_order = order(df_downexpressed$logFC, decreasing = TRUE)
df_downexpressed = df_downexpressed[logFC_order,]
ov_counts_df = filtered_raw_counts[df_overexpressed$genes,]
ov_counts_df = log2(ov_counts_df+1)
un_counts_df = filtered_raw_counts[df_downexpressed$genes,]
un_counts_df = log2(un_counts_df+1)
DE_counts_df = rbind(ov_counts_df, un_counts_df)
Compute_Heatmaps(expr_df = DE_counts_df, sample_metadata_df = clinical)
suppressMessages(library(dplyr))
suppressMessages(library(tibble))
suppressMessages(library(tidyr))
suppressMessages(library(org.Hs.eg.db)) # Homo sapiens db
suppressMessages(library(stringr))
suppressMessages(library(RColorBrewer)) # for plot
suppressMessages(library(pheatmap)) # for heatmaps
suppressMessages(library(ADImpute)) # This package provides functions to compute TPM
suppressMessages(library(ggplot2))
suppressMessages(library(FactoMineR))
suppressMessages(library(factoextra))
suppressMessages(library(survival))
suppressMessages(library(ranger))
suppressMessages(library(ggfortify))
suppressMessages(library(rlang))
suppressMessages(library(purrr))
suppressMessages(library(rio))
suppressMessages(library(uwot))
suppressMessages(library(DESeq2))
source("../Functions.R")
# Expression data
raw_counts = read.delim("../../IMMUCAN_data/NSCLC2/01_Raw_Counts/NSCLC2_all_patients_counts_forDE.txt", sep = "\t", check.names = TRUE) # "-" it's automatically converted into "." with checknames = TRUE (default). With FALSE, the script crashes. Let's convert . into original - manually
